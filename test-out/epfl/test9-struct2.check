REMARK: this makes only sense with fat codegen (computation duplicated and some structs not removed otherwise)
promoting to effect: Sym(21)=Reflect(IfThenElse(Sym(16),Block(Sym(6)),Block(Sym(20))),Summary(false,false,false,false,false,List(Sym(13), Sym(14)),List(),List(),List()),List(Sym(13), Sym(14)))
depends on  Sym(13)
depends on  Sym(14)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x10 = LoopArray(100) { x7 => 
val x8 = 0.0-x7
x8
}
var x13 = x10
val x11 = LoopArray(100) { x7 => 
x7
}
var x14 = x11
val x4 = LoopArray(100) { x1 => 
x1
}
val x5 = LoopArray(100) { x1 => 
val x2 = 0.0-x1
x2
}
val x16 = x0 > 7
val x21 = if (x16) {
val x6 = new { val re = x4; val im = x5 }
x6
} else {
val x17 = x13
val x18 = x14
val x19 = new { val re = x17; val im = x18 }
x19
}
x13 = x4
x14 = x5
val x24 = x13
val x25 = x14
val x26 = new { val re = x24; val im = x25 }
println(x26)
println(x21)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
