----- Sym(25) / Set((re,Sym(4)), (im,Sym(26)))
TTP(List(Sym(4)),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Sym(1)))))
TTP(List(Sym(13)),ThinDef(Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List())))
TTP(List(Sym(2)),ThinDef(Minus(Const(0.0),Sym(1))))
TTP(List(Sym(5)),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Sym(2)))))
TTP(List(Sym(14)),ThinDef(Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List())))
TTP(List(Sym(16)),ThinDef(OrderingGT(Sym(0),Const(7))))
TTP(List(Sym(19)),ThinDef(ArrayIndex(Sym(5),Sym(17))))
TTP(List(Sym(21)),ThinDef(Minus(Const(0.0),Sym(19))))
TTP(List(Sym(23)),SimpleFatLoop(Const(100),Sym(17),List(ArrayElem(Sym(21)))))
TTP(List(Sym(27)),ThinDef(SimpleStruct(List(Array, Complex),Map(re -> Sym(4), im -> Sym(26)))))
TTP(List(Sym(28)),ThinDef(Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List())))
TTP(List(Sym(29)),ThinDef(Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28)))))
TTP(List(Sym(26)),SimpleFatIfThenElse(Sym(16),List(Sym(23)),List(Sym(5))))
wtableneg: List()
partitions: List(TTP(List(Sym(4), Sym(5)),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Sym(1)), ArrayElem(Sym(2))))))
considering TTP(List(Sym(19)),ThinDef(ArrayIndex(Sym(5),Sym(17))))
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Sym(1)))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(1))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Sym(1))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Sym(2)))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(2))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Sym(2))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Sym(21)))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Sym(21))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Sym(21))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5))
skipping mirror operation Sym(26)=Phi(Sym(16),Const(()),Sym(23),Const(()),Sym(5)) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5)) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(List(Array, Complex),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Sym(1)))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(1))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Sym(1))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Sym(2)))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(2))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Sym(2))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Sym(21)))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Sym(21))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Sym(21))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5))
skipping mirror operation Sym(26)=Phi(Sym(16),Const(()),Sym(23),Const(()),Sym(5)) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5)) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(List(Array, Complex),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Sym(1)))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(1))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Sym(1))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Sym(2)))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(2))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Sym(2))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Sym(21)))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Sym(21))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Sym(21))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5))
skipping mirror operation Sym(26)=Phi(Sym(16),Const(()),Sym(23),Const(()),Sym(5)) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5)) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(List(Array, Complex),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Sym(1)))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(1))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Sym(1))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Sym(2)))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(2))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Sym(2))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Sym(21)))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Sym(21))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Sym(21))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5))
skipping mirror operation Sym(26)=Phi(Sym(16),Const(()),Sym(23),Const(()),Sym(5)) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Sym(23)) else List(Sym(5)) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(List(Array, Complex),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4), Sym(5)), List(ArrayElem(Sym(1)), ArrayElem(Sym(2)))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(1))) syms Sym(1) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Sym(2))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(4), Sym(5)), List(ArrayElem(Sym(1)), ArrayElem(Sym(2))) with subst Sym(1) -> Sym(1)
try once more ...
wtableneg: List()
partitions: List(TTP(List(Sym(4), Sym(5)),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Sym(1)), ArrayElem(Sym(2))))))
no changes, we're done
TTP(List(Sym(2)),ThinDef(Minus(Const(0.0),Sym(1))))
TTP(List(Sym(19)),ThinDef(ArrayIndex(Sym(5),Sym(17))))
TTP(List(Sym(21)),ThinDef(Minus(Const(0.0),Sym(19))))
TTP(List(Sym(23)),SimpleFatLoop(Const(100),Sym(17),List(ArrayElem(Sym(21)))))
wtableneg: List()
partitions: List(TTP(List(Sym(23)),SimpleFatLoop(Const(100),Sym(17),List(ArrayElem(Sym(21))))))
no changes, we're done
TTP(List(Sym(19)),ThinDef(ArrayIndex(Sym(5),Sym(17))))
TTP(List(Sym(21)),ThinDef(Minus(Const(0.0),Sym(19))))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Any)) {
def apply(x0:Int): Any = {
var x4 = new Array[](100)
var x5 = new Array[](100)
for (x1 <- 0 until 100) {
val x2 = 0.0-x1
x4(x1) = x1
x5(x1) = x2
}
var x13: Any = x4
var x14: Any = x5
val x16 = x0 > 7
val x26 = if (x16) {
var x23 = new Array[](100)
for (x17 <- 0 until 100) {
val x19 = x5.apply(x17)
val x21 = 0.0-x19
x23(x17) = x21
}
x23
} else {
x5
}
val x27 = Map("re"->x4,"im"->x26) //Array Complex
val x28 = println(x27)
x28
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
