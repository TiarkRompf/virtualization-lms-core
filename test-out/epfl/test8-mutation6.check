promoting to effect: Sym(5)=Reflect(SimpleLoop(Const(10),Sym(4),ArrayElem(Block(Sym(3)))),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3)))
depends on  Sym(3)
promoting to effect: Sym(12)=Reflect(ArrayIndex(Sym(11),Const(5)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3)))
depends on  Sym(3)
promoting to effect: Sym(13)=Reflect(ArrayIndex(Sym(12),Const(50)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3)))
depends on  Sym(3)
promoting to effect: Sym(15)=Reflect(ArrayIndex(Sym(11),Const(5)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3), Sym(14)))
depends on  Sym(3)
promoting to effect: Sym(16)=Reflect(ArrayIndex(Sym(15),Const(50)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3), Sym(14)))
depends on  Sym(3)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x2 = LoopArray(100) { x1 => 
0.0
}
val x3 = x2.clone // mutable
val x5 = LoopArray(10) { x4 => 
x3
}
val x10 = x0 > 7
val x11 = if (x10) {
x5
} else {
val x8 = LoopArray(100) { x7 => 
0.0
}
val x9 = LoopArray(10) { x6 => 
x8
}
x9
}
val x12 = x11.apply(5)
val x13 = x12.apply(50)
x3.update(50, 50.0)
val x15 = x11.apply(5)
val x16 = x15.apply(50)
val x17 = x16-x13
println(x17)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
