/*****************************************
  Emitting Generated Code                  
*******************************************/
class Match extends ((Unit)=>(scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]])) {
def apply(x0:Unit): scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]] = {
var x10: scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]] = null
var x1: scala.Function1[Char, scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]]] = null
var x17: scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]] = null
var x4: scala.Function1[Char, scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]]] = null
var x13: scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]] = null
var x7: scala.Function1[Char, scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]]] = null
var x11: scala.virtualization.lms.epfl.test4.Automaton[Char, scala.collection.immutable.List[Any]] = null
x1 = {x2: (Char) => 
val x3 = x2 == 'A'
val x18 = if (x3) {
x17
} else {
x10
}
x18
}
x4 = {x5: (Char) => 
val x6 = x5 == 'A'
val x16 = if (x6) {
x13
} else {
x10
}
x16
}
x7 = {x8: (Char) => 
val x9 = x8 == 'B'
val x15 = if (x9) {
x11
} else {
val x12 = x8 == 'A'
val x14 = if (x12) {
x13
} else {
x10
}
x14
}
x15
}
x10 = scala.virtualization.lms.epfl.test4.Automaton(List(),x1)
x11 = x10.copy(out = "found"::x10.out)
x13 = scala.virtualization.lms.epfl.test4.Automaton(List(),x7)
x17 = scala.virtualization.lms.epfl.test4.Automaton(List(),x4)
x10
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
idx:   0
out:   List()
char:  X
idx:   1
out:   List()
char:  A
idx:   2
out:   List()
char:  B
idx:   3
out:   List()
char:  Z
idx:   4
out:   List()
char:  A
idx:   5
out:   List()
char:  A
idx:   6
out:   List()
char:  B
idx:   7
out:   List(found)
char:  W
idx:   8
out:   List()
char:  A
idx:   9
out:   List()
char:  A
idx:   10
out:   List()
char:  A
idx:   11
out:   List()
char:  A
idx:   12
out:   List()
char:  B
idx:   13
out:   List(found)
char:  Q
idx:   14
out:   List()
