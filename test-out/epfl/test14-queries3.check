/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.epfl.test14.Schema
class staged1 extends ((Unit)=>(Unit)) {
def apply(x0:Unit): Unit = {
println("expertise(\"abstract\"):")
val x800 = Schema.org.departments.flatMap { x732 => 
val x792 = Schema.org.employees.flatMap { x763 => 
val x734 = x732.dpt
val x764 = x763.dpt
val x765 = x734 == x764
val x785 = Schema.org.tasks.flatMap { x776 => 
val x767 = x763.emp
val x777 = x776.emp
val x778 = x767 == x777
val x779 = x776.tsk
val x780 = x779 == "abstract"
val x781 = if (x778 == true) {
x780
} else false
val x784 = if (x781) {
val x661 = new Schema.Record { val ignore = () }
val x688 = List(x661)
x688
} else {
val x19 = List()
x19
}
x784
}
val x786 = x785.isEmpty
val x788 = if (x765 == true) {
x786
} else false
val x791 = if (x788) {
val x661 = new Schema.Record { val ignore = () }
val x688 = List(x661)
x688
} else {
val x19 = List()
x19
}
x791
}
val x793 = x792.isEmpty
val x799 = if (x793) {
val x734 = x732.dpt
val x797 = new Schema.Record { val dpt = x734 }
val x798 = List(x797)
x798
} else {
val x19 = List()
x19
}
x799
}
println(x800)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

expertise("abstract"):
List({dpt:Quality}, {dpt:Research})
