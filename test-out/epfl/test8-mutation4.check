promoting to effect: Sym(5)=Reflect(SimpleLoop(Const(10),Sym(4),ArrayElem(Block(Sym(3)))),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3)))
depends on  Sym(3)
error: illegal sharing of mutable objects Sym(3)
at Sym(6)=Reflect(ArrayMutable(Sym(5)),Summary(false,false,false,false,true,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3)))
promoting to effect: Sym(7)=Reflect(ArrayIndex(Sym(6),Const(5)),Summary(false,false,false,false,false,List(Sym(6), Sym(3)),List(Sym(6), Sym(3)),List(),List()),List(Sym(3), Sym(6)))
depends on  Sym(6)
depends on  Sym(3)
promoting to effect: Sym(8)=Reflect(ArrayIndex(Sym(7),Const(50)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3)))
depends on  Sym(3)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x2 = LoopArray(100) { x1 => 
0.0
}
val x3 = x2.clone // mutable
val x5 = LoopArray(10) { x4 => 
x3
}
val x6 = x5.clone // mutable
val x7 = x6.apply(5)
val x8 = x7.apply(50)
println(x8)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
