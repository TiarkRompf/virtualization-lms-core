package scala.virtualization.lms
package epfl
package test10
package original

import test10.original.Conversions._
import test10.original.Operations._
import test10.original.SpecificOperations._

/*****************************************
  Emitting Generated Code                  
*******************************************/
class Experiment extends ((scala.virtualization.lms.epfl.test10.original.MDArray[Int])=>(scala.virtualization.lms.epfl.test10.original.MDArray[Int])) {
  def apply(x108:scala.virtualization.lms.epfl.test10.original.MDArray[Int]): scala.virtualization.lms.epfl.test10.original.MDArray[Int] = {
    // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- Shape(Sym(108))
    // Shape: V109=U135 and S109=[u12]
    val x109: MDArray[Int] = shape(x108)
    // RuntimeCheck : POST:   V109 = U135                                            from Bubble up value for Sym(109) <- GenArrayWith(Sym(109) - Sym(194))
    // RuntimeCheck : POST:   S109 = [u12]                                           from Bubble up shape for Sym(109) <- GenArrayWith(Sym(109) - Sym(194))
    // RuntimeCheck : POST:   V194 = [u111]                                          from Bubble up value for Sym(194) <- GenArrayWith(Sym(109) - Sym(194))
    // RuntimeCheck : POST:   S194 = []                                              from Bubble up shape for Sym(194) <- GenArrayWith(Sym(109) - Sym(194))
    // RuntimeCheck : PRE:    S109 = [u346]                                          from GenArrayWith(Sym(109) - Sym(194))
    // RuntimeCheck : PRE:    S109 = S112                                            from GenArrayWith(Sym(109) - Sym(194))
    // RuntimeCheck : PRE:    V109(:length(V112)) < V112                             from GenArrayWith(Sym(109) - Sym(194))
    // RuntimeCheck : PRE:    V109(length(V112):) = S194                             from GenArrayWith(Sym(109) - Sym(194))
    // Shape: S195=U135
    
    val x195: MDArray[Int] = {
      val opName: String = "genarray"
      var result: Array[Int] = null
      var rshape: Array[Int] = null
      // Shape: V4=[u2] and S4=[]
      val x4: Boolean = internalReshape(Nil, Array(true), "knownAtCompileTime")
      // RuntimeCheck : POST:   V4 = [u2]                                              from Bubble up value for Sym(4) <- ToValue(Sym(4))
      // RuntimeCheck : POST:   S4 = []                                                from Bubble up shape for Sym(4) <- ToValue(Sym(4))
      // RuntimeCheck : PRE:    length(S4) = length([])                                from ToValue(Sym(4))
      // Shape: V5=[u107] and S5=[]
      val x5: Boolean = x4
      // RuntimeCheck : POST:   V5 = [u107]                                            from Bubble up value for Sym(5) <- FromValue(Sym(5))
      // RuntimeCheck : POST:   S5 = []                                                from Bubble up shape for Sym(5) <- FromValue(Sym(5))
      // Shape: V15=[u106] and S15=[]
      val x15: Boolean = x5
      // RuntimeCheck : POST:   V15 = [u106]                                           from Bubble up value for Sym(15) <- ToValue(Sym(15))
      // RuntimeCheck : POST:   S15 = []                                               from Bubble up shape for Sym(15) <- ToValue(Sym(15))
      // RuntimeCheck : PRE:    length(S15) = length([])                               from ToValue(Sym(15))
      // Shape: V16=[u105] and S16=[]
      val x16: Boolean = x15
      // Shape: V10=[0] and S10=[]
      val x10: Int = internalReshape(Nil, Array(0), "knownAtCompileTime")
      // Shape: V7=[0] and S7=[1]
      val x7: MDArray[Int] = internalReshape(1::Nil, Array(0), "knownAtCompileTime")
      // RuntimeCheck : POST:   V109 = U135                                            from Bubble up value for Sym(109) <- Shape(Sym(109))
      // RuntimeCheck : POST:   S109 = [u12]                                           from Bubble up shape for Sym(109) <- Shape(Sym(109))
      // Shape: V110=[u12] and S110=[1]
      val x110: MDArray[Int] = shape(x109)
      // RuntimeCheck : POST:   V110 = [u12]                                           from Bubble up value for Sym(110) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : POST:   S110 = [1]                                             from Bubble up shape for Sym(110) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : POST:   V7 = [0]                                               from Bubble up value for Sym(7) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : POST:   S7 = [1]                                               from Bubble up shape for Sym(7) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : PRE:    length(S7) = length([u357])                            from Sel(Sym(7), Sym(110))
      // RuntimeCheck : PRE:    S110(:length(V7)) < V7                                 from Sel(Sym(7), Sym(110))
      // Shape: V111=[u12] and S111=[]
      
      // Shape: V111=[u12] and S111=[]
      val x111: Int = x110.content()(flatten(shape(x110), x7, "sel"))
      // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : POST:   V111 = [u12]                                           from Bubble up value for Sym(111) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : POST:   S111 = []                                              from Bubble up shape for Sym(111) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : PRE:    S111 = []                                              from Values(Sym(10), Sym(111))
      // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(111))
      // Shape: S112=[u12]
      val x112: MDArray[Int] = {
        val result = new Array[Int](x111)
        for(i <- List.range(0, result.length))
        result(i) = x10
        internalReshape(x111::Nil, result, "values")
      }
      // Shape: V12=[1] and S12=[]
      val x12: Int = internalReshape(Nil, Array(1), "knownAtCompileTime")
      // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : POST:   V111 = [u12]                                           from Bubble up value for Sym(111) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : POST:   S111 = []                                              from Bubble up shape for Sym(111) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : PRE:    S111 = []                                              from Values(Sym(12), Sym(111))
      // RuntimeCheck : PRE:    S12 = []                                               from Values(Sym(12), Sym(111))
      // Shape: S114=[u12]
      val x114: MDArray[Int] = {
        val result = new Array[Int](x111)
        for(i <- List.range(0, result.length))
        result(i) = x12
        internalReshape(x111::Nil, result, "values")
      }
      // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : POST:   V109 = U135                                            from Bubble up value for Sym(109) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : POST:   S109 = [u12]                                           from Bubble up shape for Sym(109) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : PRE:    S109 = S12 OR S12 = []                                 from InfixOp(-: Sym(109) and Sym(12))
      // Shape: S161=[u12]
      val x161: MDArray[Int] = {
        val result = new Array[Int](shape(x109).content().foldLeft(1)((a,b) => a*b))
        for(i <- List.range(0, result.length))
        result(i) = x109.content()(i) -  x12
        internalReshape(shape(x109), result, "infixOpAA")
      }
      // RuntimeCheck : POST:   V193 = [u112]                                          from Bubble up value for Sym(193) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S193 = []                                              from Bubble up shape for Sym(193) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S162 = [u12]                                           from Bubble up shape for Sym(162) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S112 = [u12]                                           from Bubble up shape for Sym(112) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S114 = [u12]                                           from Bubble up shape for Sym(114) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   V16 = [u105]                                           from Bubble up value for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S16 = []                                               from Bubble up shape for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S161 = [u12]                                           from Bubble up shape for Sym(161) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   V16 = [u105]                                           from Bubble up value for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S16 = []                                               from Bubble up shape for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : POST:   S112 = [u12]                                           from Bubble up shape for Sym(112) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : PRE:    length(S112) = length([u347])                          from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : PRE:    S16 = []                                               from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : PRE:    S16 = []                                               from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : PRE:    S161 = S112                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : PRE:    S114 = S112                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : PRE:    S112 = S112                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // RuntimeCheck : PRE:    V112 < V161                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      // Shape: V194=[u111] and S194=[]
      // with: With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(161) step=Sym(114) width=Sym(112)  Sym(162) => Sym(193))
      for (iv <- iterateWithStep(_lb=x112, lbStrict=x16, ubStrict=x16, _ub=x161, step=x114, width=x112, opName=opName)) {
        val x162: MDArray[Int] = iv
        val feval: MDArray[Int] = {
          // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- Sel(Sym(162), Sym(108))
          // RuntimeCheck : POST:   S162 = [u12]                                           from Bubble up shape for Sym(162) <- Sel(Sym(162), Sym(108))
          // RuntimeCheck : PRE:    length(S162) = length([u360])                          from Sel(Sym(162), Sym(108))
          // RuntimeCheck : PRE:    S108(:length(V162)) < V162                             from Sel(Sym(162), Sym(108))
          // Shape: V187=[u143] and S187=[]
          
          // Shape: V187=[u143] and S187=[]
          val x187: Int = x108.content()(flatten(shape(x108), x162, "sel"))
          // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- InfixOp(===: Sym(187) and Sym(10))
          // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- InfixOp(===: Sym(187) and Sym(10))
          // RuntimeCheck : POST:   V187 = [u143]                                          from Bubble up value for Sym(187) <- InfixOp(===: Sym(187) and Sym(10))
          // RuntimeCheck : POST:   S187 = []                                              from Bubble up shape for Sym(187) <- InfixOp(===: Sym(187) and Sym(10))
          // RuntimeCheck : PRE:    S187 = S10 OR S10 = []                                 from InfixOp(===: Sym(187) and Sym(10))
          // Shape: V188=[u142] and S188=[]
          val x188: Boolean = {
            val result = new Array[Boolean](shape(x187).content().foldLeft(1)((a,b) => a*b))
            for(i <- List.range(0, result.length))
            result(i) = x187.content()(i) ===  x10
            internalReshape(shape(x187), result, "infixOpAA")
          }
          // RuntimeCheck : POST:   V188 = [u142]                                          from Bubble up value for Sym(188) <- ToValue(Sym(188))
          // RuntimeCheck : POST:   S188 = []                                              from Bubble up shape for Sym(188) <- ToValue(Sym(188))
          // RuntimeCheck : PRE:    length(S188) = length([])                              from ToValue(Sym(188))
          // Shape: V189=[u132] and S189=[]
          val x189: Boolean = x188
          val x193 = if (x189) {
            // Shape: V20=[3] and S20=[]
            val x20: Int = internalReshape(Nil, Array(3), "knownAtCompileTime")
            // RuntimeCheck : POST:   V180 = [u120]                                          from Bubble up value for Sym(180) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : POST:   S180 = []                                              from Bubble up shape for Sym(180) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : POST:   S179 = []                                              from Bubble up shape for Sym(179) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : POST:   S178 = []                                              from Bubble up shape for Sym(178) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : POST:   V183 = [u140]                                          from Bubble up value for Sym(183) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : POST:   S183 = []                                              from Bubble up shape for Sym(183) <- FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : PRE:    S10 = S183                                             from FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // RuntimeCheck : PRE:    S180 = S183                                            from FoldArrayWith(Sym(10), fold (Sym(178), Sym(179)) => Sym(180), Sym(183))
            // Shape: V184=[u119] and S184=[]
            
            val x184: Int = {
              val opName: String = "fold"
              var result: MDArray[Int] = x10
              val foldFunction: (MDArray[Int], MDArray[Int]) => MDArray[Int] = (x178, x179) => {
                // RuntimeCheck : POST:   S179 = []                                              from Bubble up shape for Sym(179) <- ScalarOperator Sym(178) + Sym(179)
                // RuntimeCheck : POST:   S178 = []                                              from Bubble up shape for Sym(178) <- ScalarOperator Sym(178) + Sym(179)
                // RuntimeCheck : PRE:    S178 = []                                              from ScalarOperator Sym(178) + Sym(179)
                // RuntimeCheck : PRE:    S179 = []                                              from ScalarOperator Sym(178) + Sym(179)
                // Shape: V180=[u120] and S180=[]
                val x180: Int = ((a: Int, b: Int) => a + b)(x178, x179)
                x180
              }
              // Shape: V23=[u6] and S23=[]
              val x23: Boolean = internalReshape(Nil, Array(false), "knownAtCompileTime")
              // RuntimeCheck : POST:   V23 = [u6]                                             from Bubble up value for Sym(23) <- ToValue(Sym(23))
              // RuntimeCheck : POST:   S23 = []                                               from Bubble up shape for Sym(23) <- ToValue(Sym(23))
              // RuntimeCheck : PRE:    length(S23) = length([])                               from ToValue(Sym(23))
              // Shape: V24=[u84] and S24=[]
              val x24: Boolean = x23
              // RuntimeCheck : POST:   V24 = [u84]                                            from Bubble up value for Sym(24) <- FromValue(Sym(24))
              // RuntimeCheck : POST:   S24 = []                                               from Bubble up shape for Sym(24) <- FromValue(Sym(24))
              // Shape: V30=[u83] and S30=[]
              val x30: Boolean = x24
              // RuntimeCheck : POST:   V30 = [u83]                                            from Bubble up value for Sym(30) <- ToValue(Sym(30))
              // RuntimeCheck : POST:   S30 = []                                               from Bubble up shape for Sym(30) <- ToValue(Sym(30))
              // RuntimeCheck : PRE:    length(S30) = length([])                               from ToValue(Sym(30))
              // Shape: V31=[u82] and S31=[]
              val x31: Boolean = x30
              // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- Dim(Sym(108))
              // Shape: V116=[u7] and S116=[]
              val x116: Int = dim(x108)
              // RuntimeCheck : POST:   V116 = [u7]                                            from Bubble up value for Sym(116) <- FromValue(Sym(116))
              // RuntimeCheck : POST:   S116 = []                                              from Bubble up shape for Sym(116) <- FromValue(Sym(116))
              // Shape: V117=[u12] and S117=[]
              val x117: Int = x116
              // RuntimeCheck : POST:   V20 = [3]                                              from Bubble up value for Sym(20) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : POST:   S20 = []                                               from Bubble up shape for Sym(20) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : POST:   V117 = [u12]                                           from Bubble up value for Sym(117) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : POST:   S117 = []                                              from Bubble up shape for Sym(117) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : PRE:    S117 = []                                              from Values(Sym(20), Sym(117))
              // RuntimeCheck : PRE:    S20 = []                                               from Values(Sym(20), Sym(117))
              // Shape: S118=[u12]
              val x118: MDArray[Int] = {
                val result = new Array[Int](x117)
                for(i <- List.range(0, result.length))
                result(i) = x20
                internalReshape(x117::Nil, result, "values")
              }
              // RuntimeCheck : POST:   S118 = [u12]                                           from Bubble up shape for Sym(118) <- GenArrayWith(Sym(118) - Sym(168))
              // RuntimeCheck : POST:   S168 = U131                                            from Bubble up shape for Sym(168) <- GenArrayWith(Sym(118) - Sym(168))
              // RuntimeCheck : PRE:    S118 = [u437]                                          from GenArrayWith(Sym(118) - Sym(168))
              // RuntimeCheck : PRE:    S118 = S122                                            from GenArrayWith(Sym(118) - Sym(168))
              // RuntimeCheck : PRE:    V118(:length(V122)) < V122                             from GenArrayWith(Sym(118) - Sym(168))
              // RuntimeCheck : PRE:    V118(length(V122):) = S168                             from GenArrayWith(Sym(118) - Sym(168))
              // Shape: S169=U127
              
              val x169: MDArray[Int] = {
                val opName: String = "genarray"
                var result: Array[Int] = null
                var rshape: Array[Int] = null
                // RuntimeCheck : POST:   S118 = [u12]                                           from Bubble up shape for Sym(118) <- Shape(Sym(118))
                // Shape: V120=[u12] and S120=[1]
                val x120: MDArray[Int] = shape(x118)
                // RuntimeCheck : POST:   V120 = [u12]                                           from Bubble up value for Sym(120) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : POST:   S120 = [1]                                             from Bubble up shape for Sym(120) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : POST:   V7 = [0]                                               from Bubble up value for Sym(7) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : POST:   S7 = [1]                                               from Bubble up shape for Sym(7) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : PRE:    length(S7) = length([u448])                            from Sel(Sym(7), Sym(120))
                // RuntimeCheck : PRE:    S120(:length(V7)) < V7                                 from Sel(Sym(7), Sym(120))
                // Shape: V121=[u12] and S121=[]
                
                // Shape: V121=[u12] and S121=[]
                val x121: Int = x120.content()(flatten(shape(x120), x7, "sel"))
                // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : POST:   V121 = [u12]                                           from Bubble up value for Sym(121) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : POST:   S121 = []                                              from Bubble up shape for Sym(121) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : PRE:    S121 = []                                              from Values(Sym(10), Sym(121))
                // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(121))
                // Shape: S122=[u12]
                val x122: MDArray[Int] = {
                  val result = new Array[Int](x121)
                  for(i <- List.range(0, result.length))
                  result(i) = x10
                  internalReshape(x121::Nil, result, "values")
                }
                // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : POST:   V121 = [u12]                                           from Bubble up value for Sym(121) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : POST:   S121 = []                                              from Bubble up shape for Sym(121) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : PRE:    S121 = []                                              from Values(Sym(12), Sym(121))
                // RuntimeCheck : PRE:    S12 = []                                               from Values(Sym(12), Sym(121))
                // Shape: S124=[u12]
                val x124: MDArray[Int] = {
                  val result = new Array[Int](x121)
                  for(i <- List.range(0, result.length))
                  result(i) = x12
                  internalReshape(x121::Nil, result, "values")
                }
                // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- InfixOp(-: Sym(118) and Sym(12))
                // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- InfixOp(-: Sym(118) and Sym(12))
                // RuntimeCheck : POST:   S118 = [u12]                                           from Bubble up shape for Sym(118) <- InfixOp(-: Sym(118) and Sym(12))
                // RuntimeCheck : PRE:    S118 = S12 OR S12 = []                                 from InfixOp(-: Sym(118) and Sym(12))
                // Shape: S164=[u12]
                val x164: MDArray[Int] = {
                  val result = new Array[Int](shape(x118).content().foldLeft(1)((a,b) => a*b))
                  for(i <- List.range(0, result.length))
                  result(i) = x118.content()(i) -  x12
                  internalReshape(shape(x118), result, "infixOpAA")
                }
                // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- InfixOp(-: Sym(162) and Sym(12))
                // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- InfixOp(-: Sym(162) and Sym(12))
                // RuntimeCheck : POST:   S162 = [u12]                                           from Bubble up shape for Sym(162) <- InfixOp(-: Sym(162) and Sym(12))
                // RuntimeCheck : PRE:    S162 = S12 OR S12 = []                                 from InfixOp(-: Sym(162) and Sym(12))
                // Shape: S163=[u12]
                val x163: MDArray[Int] = {
                  val result = new Array[Int](shape(x162).content().foldLeft(1)((a,b) => a*b))
                  for(i <- List.range(0, result.length))
                  result(i) = x162.content()(i) -  x12
                  internalReshape(shape(x162), result, "infixOpAA")
                }
                // RuntimeCheck : POST:   S167 = U131                                            from Bubble up shape for Sym(167) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   S165 = [u12]                                           from Bubble up shape for Sym(165) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   S122 = [u12]                                           from Bubble up shape for Sym(122) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   S124 = [u12]                                           from Bubble up shape for Sym(124) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   V31 = [u82]                                            from Bubble up value for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   S31 = []                                               from Bubble up shape for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   S164 = [u12]                                           from Bubble up shape for Sym(164) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   V31 = [u82]                                            from Bubble up value for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   S31 = []                                               from Bubble up shape for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : POST:   S122 = [u12]                                           from Bubble up shape for Sym(122) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : PRE:    length(S122) = length([u438])                          from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : PRE:    S31 = []                                               from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : PRE:    S31 = []                                               from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : PRE:    S164 = S122                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : PRE:    S124 = S122                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : PRE:    S122 = S122                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // RuntimeCheck : PRE:    V122 < V164                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                // Shape: S168=U131
                // with: With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(164) step=Sym(124) width=Sym(122)  Sym(165) => Sym(167))
                for (iv <- iterateWithStep(_lb=x122, lbStrict=x31, ubStrict=x31, _ub=x164, step=x124, width=x122, opName=opName)) {
                  val x165: MDArray[Int] = iv
                  val feval: MDArray[Int] = {
                    // RuntimeCheck : POST:   S163 = [u12]                                           from Bubble up shape for Sym(163) <- InfixOp(+: Sym(165) and Sym(163))
                    // RuntimeCheck : POST:   S165 = [u12]                                           from Bubble up shape for Sym(165) <- InfixOp(+: Sym(165) and Sym(163))
                    // RuntimeCheck : PRE:    S165 = S163 OR S163 = []                               from InfixOp(+: Sym(165) and Sym(163))
                    // Shape: S166=[u12]
                    val x166: MDArray[Int] = {
                      val result = new Array[Int](shape(x165).content().foldLeft(1)((a,b) => a*b))
                      for(i <- List.range(0, result.length))
                      result(i) = x165.content()(i) +  x163.content()(i)
                      internalReshape(shape(x165), result, "infixOpAA")
                    }
                    // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- Sel(Sym(166), Sym(108))
                    // RuntimeCheck : POST:   S166 = [u12]                                           from Bubble up shape for Sym(166) <- Sel(Sym(166), Sym(108))
                    // RuntimeCheck : PRE:    length(S166) = length([u451])                          from Sel(Sym(166), Sym(108))
                    // RuntimeCheck : PRE:    S108(:length(V166)) < V166                             from Sel(Sym(166), Sym(108))
                    // Shape: S167=U131
                    val x167: MDArray[Int] = sel(x166, x108)
                    x167
                  }
                  // the action of this loop:
                  if (result == null) {
                    // create the array and shape
                    result = new Array[Int](x118.content().foldLeft(1)((a,b) => a*b) * feval.content().length)
                    rshape = shape(feval).content()
                  } else {
                    // check shape -- this WILL be redundant due to runtime checks
                    if (shape(feval).content().toList != rshape.toList) throw new Exception(opName + ": Incompatible shapes:" + rshape.toList.toString + " vs " + shape(feval).content().toList.toString)
                  }
                  // copy new content
                  val mainIndex: Int = flatten(x118 ::: rshape.toList, iv ::: zeros(rshape.length), opName)
                  for (innerIndex <- List.range(0, rshape.length)) {
                    result(mainIndex + innerIndex) = feval(innerIndex)
                  }
                }
                internalReshape(x118 ::: rshape.toList, result, opName)
              }
              
              // RuntimeCheck : POST:   S169 = U127                                            from Bubble up shape for Sym(169) <- Dim(Sym(169))
              // Shape: V170=[u13] and S170=[]
              val x170: Int = dim(x169)
              // RuntimeCheck : POST:   V170 = [u13]                                           from Bubble up value for Sym(170) <- FromValue(Sym(170))
              // RuntimeCheck : POST:   S170 = []                                              from Bubble up shape for Sym(170) <- FromValue(Sym(170))
              // Shape: V171=[u129] and S171=[]
              val x171: Int = x170
              // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(171))
              // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(171))
              // RuntimeCheck : POST:   V171 = [u129]                                          from Bubble up value for Sym(171) <- Values(Sym(10), Sym(171))
              // RuntimeCheck : POST:   S171 = []                                              from Bubble up shape for Sym(171) <- Values(Sym(10), Sym(171))
              // RuntimeCheck : PRE:    S171 = []                                              from Values(Sym(10), Sym(171))
              // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(171))
              // Shape: S172=[u129]
              val x172: MDArray[Int] = {
                val result = new Array[Int](x171)
                for(i <- List.range(0, result.length))
                result(i) = x10
                internalReshape(x171::Nil, result, "values")
              }
              // RuntimeCheck : POST:   S169 = U127                                            from Bubble up shape for Sym(169) <- Shape(Sym(169))
              // Shape: V173=U127 and S173=[u129]
              val x173: MDArray[Int] = shape(x169)
              // RuntimeCheck : POST:   S172 = [u129]                                          from Bubble up shape for Sym(172) <- Shape(Sym(172))
              // Shape: V174=[u129] and S174=[1]
              val x174: MDArray[Int] = shape(x172)
              // RuntimeCheck : POST:   V174 = [u129]                                          from Bubble up value for Sym(174) <- Sel(Sym(7), Sym(174))
              // RuntimeCheck : POST:   S174 = [1]                                             from Bubble up shape for Sym(174) <- Sel(Sym(7), Sym(174))
              // RuntimeCheck : POST:   V7 = [0]                                               from Bubble up value for Sym(7) <- Sel(Sym(7), Sym(174))
              // RuntimeCheck : POST:   S7 = [1]                                               from Bubble up shape for Sym(7) <- Sel(Sym(7), Sym(174))
              // RuntimeCheck : PRE:    length(S7) = length([u417])                            from Sel(Sym(7), Sym(174))
              // RuntimeCheck : PRE:    S174(:length(V7)) < V7                                 from Sel(Sym(7), Sym(174))
              // Shape: V175=[u129] and S175=[]
              
              // Shape: V175=[u129] and S175=[]
              val x175: Int = x174.content()(flatten(shape(x174), x7, "sel"))
              // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- Values(Sym(12), Sym(175))
              // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- Values(Sym(12), Sym(175))
              // RuntimeCheck : POST:   V175 = [u129]                                          from Bubble up value for Sym(175) <- Values(Sym(12), Sym(175))
              // RuntimeCheck : POST:   S175 = []                                              from Bubble up shape for Sym(175) <- Values(Sym(12), Sym(175))
              // RuntimeCheck : PRE:    S175 = []                                              from Values(Sym(12), Sym(175))
              // RuntimeCheck : PRE:    S12 = []                                               from Values(Sym(12), Sym(175))
              // Shape: S176=[u129]
              val x176: MDArray[Int] = {
                val result = new Array[Int](x175)
                for(i <- List.range(0, result.length))
                result(i) = x12
                internalReshape(x175::Nil, result, "values")
              }
              // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(175))
              // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(175))
              // RuntimeCheck : POST:   V175 = [u129]                                          from Bubble up value for Sym(175) <- Values(Sym(10), Sym(175))
              // RuntimeCheck : POST:   S175 = []                                              from Bubble up shape for Sym(175) <- Values(Sym(10), Sym(175))
              // RuntimeCheck : PRE:    S175 = []                                              from Values(Sym(10), Sym(175))
              // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(175))
              // Shape: S177=[u129]
              val x177: MDArray[Int] = {
                val result = new Array[Int](x175)
                for(i <- List.range(0, result.length))
                result(i) = x10
                internalReshape(x175::Nil, result, "values")
              }
              // RuntimeCheck : POST:   V182 = [u141]                                          from Bubble up value for Sym(182) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S182 = []                                              from Bubble up shape for Sym(182) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S181 = [u129]                                          from Bubble up shape for Sym(181) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S177 = [u129]                                          from Bubble up shape for Sym(177) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S176 = [u129]                                          from Bubble up shape for Sym(176) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   V16 = [u105]                                           from Bubble up value for Sym(16) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S16 = []                                               from Bubble up shape for Sym(16) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   V173 = U127                                            from Bubble up value for Sym(173) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S173 = [u129]                                          from Bubble up shape for Sym(173) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   V31 = [u82]                                            from Bubble up value for Sym(31) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S31 = []                                               from Bubble up shape for Sym(31) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : POST:   S172 = [u129]                                          from Bubble up shape for Sym(172) <- With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : PRE:    length(S172) = length([u361])                          from With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : PRE:    S31 = []                                               from With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : PRE:    S16 = []                                               from With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : PRE:    S173 = S172                                            from With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : PRE:    S176 = S172                                            from With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : PRE:    S177 = S172                                            from With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // RuntimeCheck : PRE:    V172 < V173                                            from With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              // Shape: V183=[u140] and S183=[]
              // with: With(lb=Sym(172) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(173) step=Sym(176) width=Sym(177)  Sym(181) => Sym(182))
              for (iv <- iterateWithStep(_lb=x172, lbStrict=x31, ubStrict=x16, _ub=x173, step=x176, width=x177, opName=opName)) {
                val x181: MDArray[Int] = iv
                val feval: MDArray[Int] = {
                  // RuntimeCheck : POST:   S169 = U127                                            from Bubble up shape for Sym(169) <- Sel(Sym(181), Sym(169))
                  // RuntimeCheck : POST:   S181 = [u129]                                          from Bubble up shape for Sym(181) <- Sel(Sym(181), Sym(169))
                  // RuntimeCheck : PRE:    length(S181) = length([u436])                          from Sel(Sym(181), Sym(169))
                  // RuntimeCheck : PRE:    S169(:length(V181)) < V181                             from Sel(Sym(181), Sym(169))
                  // Shape: V182=[u141] and S182=[]
                  
                  // Shape: V182=[u141] and S182=[]
                  val x182: Int = x169.content()(flatten(shape(x169), x181, "sel"))
                  x182
                }
                // the action of this loop:
                result = foldFunction(result, feval)
              }
              result
            }
            
            // RuntimeCheck : POST:   V184 = [u119]                                          from Bubble up value for Sym(184) <- ToValue(Sym(184))
            // RuntimeCheck : POST:   S184 = []                                              from Bubble up shape for Sym(184) <- ToValue(Sym(184))
            // RuntimeCheck : PRE:    length(S184) = length([])                              from ToValue(Sym(184))
            // Shape: V185=[u118] and S185=[]
            val x185: Int = x184
            // RuntimeCheck : POST:   V185 = [u118]                                          from Bubble up value for Sym(185) <- FromValue(Sym(185))
            // RuntimeCheck : POST:   S185 = []                                              from Bubble up shape for Sym(185) <- FromValue(Sym(185))
            // Shape: V186=[u117] and S186=[]
            val x186: Int = x185
            // RuntimeCheck : POST:   V20 = [3]                                              from Bubble up value for Sym(20) <- InfixOp(===: Sym(186) and Sym(20))
            // RuntimeCheck : POST:   S20 = []                                               from Bubble up shape for Sym(20) <- InfixOp(===: Sym(186) and Sym(20))
            // RuntimeCheck : POST:   V186 = [u117]                                          from Bubble up value for Sym(186) <- InfixOp(===: Sym(186) and Sym(20))
            // RuntimeCheck : POST:   S186 = []                                              from Bubble up shape for Sym(186) <- InfixOp(===: Sym(186) and Sym(20))
            // RuntimeCheck : PRE:    S186 = S20 OR S20 = []                                 from InfixOp(===: Sym(186) and Sym(20))
            // Shape: V190=[u116] and S190=[]
            val x190: Boolean = {
              val result = new Array[Boolean](shape(x186).content().foldLeft(1)((a,b) => a*b))
              for(i <- List.range(0, result.length))
              result(i) = x186.content()(i) ===  x20
              internalReshape(shape(x186), result, "infixOpAA")
            }
            // RuntimeCheck : POST:   V190 = [u116]                                          from Bubble up value for Sym(190) <- ToValue(Sym(190))
            // RuntimeCheck : POST:   S190 = []                                              from Bubble up shape for Sym(190) <- ToValue(Sym(190))
            // RuntimeCheck : PRE:    length(S190) = length([])                              from ToValue(Sym(190))
            // Shape: V191=[u114] and S191=[]
            val x191: Boolean = x190
            val x192 = if (x191) {
              x12
            } else {
              x10
            }
            x192
          } else {
            x10
          }
          x193
        }
        // the action of this loop:
        if (result == null) {
          // create the array and shape
          result = new Array[Int](x109.content().foldLeft(1)((a,b) => a*b) * feval.content().length)
          rshape = shape(feval).content()
        } else {
          // check shape -- this WILL be redundant due to runtime checks
          if (shape(feval).content().toList != rshape.toList) throw new Exception(opName + ": Incompatible shapes:" + rshape.toList.toString + " vs " + shape(feval).content().toList.toString)
        }
        // copy new content
        val mainIndex: Int = flatten(x109 ::: rshape.toList, iv ::: zeros(rshape.length), opName)
        for (innerIndex <- List.range(0, rshape.length)) {
          result(mainIndex + innerIndex) = feval(innerIndex)
        }
      }
      internalReshape(x109 ::: rshape.toList, result, opName)
    }
    
    // RuntimeCheck : POST:   V109 = U135                                            from Bubble up value for Sym(109) <- GenArrayWith(Sym(109) - Sym(159))
    // RuntimeCheck : POST:   S109 = [u12]                                           from Bubble up shape for Sym(109) <- GenArrayWith(Sym(109) - Sym(159))
    // RuntimeCheck : POST:   V159 = [u99]                                           from Bubble up value for Sym(159) <- GenArrayWith(Sym(109) - Sym(159))
    // RuntimeCheck : POST:   S159 = []                                              from Bubble up shape for Sym(159) <- GenArrayWith(Sym(109) - Sym(159))
    // RuntimeCheck : PRE:    S109 = [u144]                                          from GenArrayWith(Sym(109) - Sym(159))
    // RuntimeCheck : PRE:    S109 = S112                                            from GenArrayWith(Sym(109) - Sym(159))
    // RuntimeCheck : PRE:    V109(:length(V112)) < V112                             from GenArrayWith(Sym(109) - Sym(159))
    // RuntimeCheck : PRE:    V109(length(V112):) = S159                             from GenArrayWith(Sym(109) - Sym(159))
    // Shape: S160=U135
    
    val x160: MDArray[Int] = {
      val opName: String = "genarray"
      var result: Array[Int] = null
      var rshape: Array[Int] = null
      // Shape: V4=[u2] and S4=[]
      val x4: Boolean = internalReshape(Nil, Array(true), "knownAtCompileTime")
      // RuntimeCheck : POST:   V4 = [u2]                                              from Bubble up value for Sym(4) <- ToValue(Sym(4))
      // RuntimeCheck : POST:   S4 = []                                                from Bubble up shape for Sym(4) <- ToValue(Sym(4))
      // RuntimeCheck : PRE:    length(S4) = length([])                                from ToValue(Sym(4))
      // Shape: V5=[u107] and S5=[]
      val x5: Boolean = x4
      // RuntimeCheck : POST:   V5 = [u107]                                            from Bubble up value for Sym(5) <- FromValue(Sym(5))
      // RuntimeCheck : POST:   S5 = []                                                from Bubble up shape for Sym(5) <- FromValue(Sym(5))
      // Shape: V15=[u106] and S15=[]
      val x15: Boolean = x5
      // RuntimeCheck : POST:   V15 = [u106]                                           from Bubble up value for Sym(15) <- ToValue(Sym(15))
      // RuntimeCheck : POST:   S15 = []                                               from Bubble up shape for Sym(15) <- ToValue(Sym(15))
      // RuntimeCheck : PRE:    length(S15) = length([])                               from ToValue(Sym(15))
      // Shape: V16=[u105] and S16=[]
      val x16: Boolean = x15
      // Shape: V10=[0] and S10=[]
      val x10: Int = internalReshape(Nil, Array(0), "knownAtCompileTime")
      // Shape: V7=[0] and S7=[1]
      val x7: MDArray[Int] = internalReshape(1::Nil, Array(0), "knownAtCompileTime")
      // RuntimeCheck : POST:   V109 = U135                                            from Bubble up value for Sym(109) <- Shape(Sym(109))
      // RuntimeCheck : POST:   S109 = [u12]                                           from Bubble up shape for Sym(109) <- Shape(Sym(109))
      // Shape: V110=[u12] and S110=[1]
      val x110: MDArray[Int] = shape(x109)
      // RuntimeCheck : POST:   V110 = [u12]                                           from Bubble up value for Sym(110) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : POST:   S110 = [1]                                             from Bubble up shape for Sym(110) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : POST:   V7 = [0]                                               from Bubble up value for Sym(7) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : POST:   S7 = [1]                                               from Bubble up shape for Sym(7) <- Sel(Sym(7), Sym(110))
      // RuntimeCheck : PRE:    length(S7) = length([u357])                            from Sel(Sym(7), Sym(110))
      // RuntimeCheck : PRE:    S110(:length(V7)) < V7                                 from Sel(Sym(7), Sym(110))
      // Shape: V111=[u12] and S111=[]
      
      // Shape: V111=[u12] and S111=[]
      val x111: Int = x110.content()(flatten(shape(x110), x7, "sel"))
      // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : POST:   V111 = [u12]                                           from Bubble up value for Sym(111) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : POST:   S111 = []                                              from Bubble up shape for Sym(111) <- Values(Sym(10), Sym(111))
      // RuntimeCheck : PRE:    S111 = []                                              from Values(Sym(10), Sym(111))
      // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(111))
      // Shape: S112=[u12]
      val x112: MDArray[Int] = {
        val result = new Array[Int](x111)
        for(i <- List.range(0, result.length))
        result(i) = x10
        internalReshape(x111::Nil, result, "values")
      }
      // Shape: V12=[1] and S12=[]
      val x12: Int = internalReshape(Nil, Array(1), "knownAtCompileTime")
      // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : POST:   V111 = [u12]                                           from Bubble up value for Sym(111) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : POST:   S111 = []                                              from Bubble up shape for Sym(111) <- Values(Sym(12), Sym(111))
      // RuntimeCheck : PRE:    S111 = []                                              from Values(Sym(12), Sym(111))
      // RuntimeCheck : PRE:    S12 = []                                               from Values(Sym(12), Sym(111))
      // Shape: S114=[u12]
      val x114: MDArray[Int] = {
        val result = new Array[Int](x111)
        for(i <- List.range(0, result.length))
        result(i) = x12
        internalReshape(x111::Nil, result, "values")
      }
      // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : POST:   V109 = U135                                            from Bubble up value for Sym(109) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : POST:   S109 = [u12]                                           from Bubble up shape for Sym(109) <- InfixOp(-: Sym(109) and Sym(12))
      // RuntimeCheck : PRE:    S109 = S12 OR S12 = []                                 from InfixOp(-: Sym(109) and Sym(12))
      // Shape: S113=[u12]
      val x113: MDArray[Int] = {
        val result = new Array[Int](shape(x109).content().foldLeft(1)((a,b) => a*b))
        for(i <- List.range(0, result.length))
        result(i) = x109.content()(i) -  x12
        internalReshape(shape(x109), result, "infixOpAA")
      }
      // RuntimeCheck : POST:   V158 = [u100]                                          from Bubble up value for Sym(158) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S158 = []                                              from Bubble up shape for Sym(158) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S115 = [u12]                                           from Bubble up shape for Sym(115) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S112 = [u12]                                           from Bubble up shape for Sym(112) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S114 = [u12]                                           from Bubble up shape for Sym(114) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   V16 = [u105]                                           from Bubble up value for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S16 = []                                               from Bubble up shape for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S113 = [u12]                                           from Bubble up shape for Sym(113) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   V16 = [u105]                                           from Bubble up value for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S16 = []                                               from Bubble up shape for Sym(16) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : POST:   S112 = [u12]                                           from Bubble up shape for Sym(112) <- With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : PRE:    length(S112) = length([u145])                          from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : PRE:    S16 = []                                               from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : PRE:    S16 = []                                               from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : PRE:    S113 = S112                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : PRE:    S114 = S112                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : PRE:    S112 = S112                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // RuntimeCheck : PRE:    V112 < V113                                            from With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      // Shape: V159=[u99] and S159=[]
      // with: With(lb=Sym(112) lbStrict=Sym(16) ubStict=Sym(16) ub=Sym(113) step=Sym(114) width=Sym(112)  Sym(115) => Sym(158))
      for (iv <- iterateWithStep(_lb=x112, lbStrict=x16, ubStrict=x16, _ub=x113, step=x114, width=x112, opName=opName)) {
        val x115: MDArray[Int] = iv
        val feval: MDArray[Int] = {
          // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- Sel(Sym(115), Sym(108))
          // RuntimeCheck : POST:   S115 = [u12]                                           from Bubble up shape for Sym(115) <- Sel(Sym(115), Sym(108))
          // RuntimeCheck : PRE:    length(S115) = length([u344])                          from Sel(Sym(115), Sym(108))
          // RuntimeCheck : PRE:    S108(:length(V115)) < V115                             from Sel(Sym(115), Sym(108))
          // Shape: V147=[u139] and S147=[]
          
          // Shape: V147=[u139] and S147=[]
          val x147: Int = x108.content()(flatten(shape(x108), x115, "sel"))
          // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- InfixOp(===: Sym(147) and Sym(12))
          // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- InfixOp(===: Sym(147) and Sym(12))
          // RuntimeCheck : POST:   V147 = [u139]                                          from Bubble up value for Sym(147) <- InfixOp(===: Sym(147) and Sym(12))
          // RuntimeCheck : POST:   S147 = []                                              from Bubble up shape for Sym(147) <- InfixOp(===: Sym(147) and Sym(12))
          // RuntimeCheck : PRE:    S147 = S12 OR S12 = []                                 from InfixOp(===: Sym(147) and Sym(12))
          // Shape: V148=[u138] and S148=[]
          val x148: Boolean = {
            val result = new Array[Boolean](shape(x147).content().foldLeft(1)((a,b) => a*b))
            for(i <- List.range(0, result.length))
            result(i) = x147.content()(i) ===  x12
            internalReshape(shape(x147), result, "infixOpAA")
          }
          // RuntimeCheck : POST:   V148 = [u138]                                          from Bubble up value for Sym(148) <- ToValue(Sym(148))
          // RuntimeCheck : POST:   S148 = []                                              from Bubble up shape for Sym(148) <- ToValue(Sym(148))
          // RuntimeCheck : PRE:    length(S148) = length([])                              from ToValue(Sym(148))
          // Shape: V149=[u87] and S149=[]
          val x149: Boolean = x148
          val x158 = if (x149) {
            // Shape: V58=[2] and S58=[]
            val x58: Int = internalReshape(Nil, Array(2), "knownAtCompileTime")
            // RuntimeCheck : POST:   V140 = [u60]                                           from Bubble up value for Sym(140) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : POST:   S140 = []                                              from Bubble up shape for Sym(140) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : POST:   S139 = []                                              from Bubble up shape for Sym(139) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : POST:   S138 = []                                              from Bubble up shape for Sym(138) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : POST:   V143 = [u136]                                          from Bubble up value for Sym(143) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : POST:   S143 = []                                              from Bubble up shape for Sym(143) <- FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : PRE:    S10 = S143                                             from FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // RuntimeCheck : PRE:    S140 = S143                                            from FoldArrayWith(Sym(10), fold (Sym(138), Sym(139)) => Sym(140), Sym(143))
            // Shape: V144=[u103] and S144=[]
            
            val x144: Int = {
              val opName: String = "fold"
              var result: MDArray[Int] = x10
              val foldFunction: (MDArray[Int], MDArray[Int]) => MDArray[Int] = (x138, x139) => {
                // RuntimeCheck : POST:   S139 = []                                              from Bubble up shape for Sym(139) <- ScalarOperator Sym(138) + Sym(139)
                // RuntimeCheck : POST:   S138 = []                                              from Bubble up shape for Sym(138) <- ScalarOperator Sym(138) + Sym(139)
                // RuntimeCheck : PRE:    S138 = []                                              from ScalarOperator Sym(138) + Sym(139)
                // RuntimeCheck : PRE:    S139 = []                                              from ScalarOperator Sym(138) + Sym(139)
                // Shape: V140=[u60] and S140=[]
                val x140: Int = ((a: Int, b: Int) => a + b)(x138, x139)
                x140
              }
              // Shape: V23=[u6] and S23=[]
              val x23: Boolean = internalReshape(Nil, Array(false), "knownAtCompileTime")
              // RuntimeCheck : POST:   V23 = [u6]                                             from Bubble up value for Sym(23) <- ToValue(Sym(23))
              // RuntimeCheck : POST:   S23 = []                                               from Bubble up shape for Sym(23) <- ToValue(Sym(23))
              // RuntimeCheck : PRE:    length(S23) = length([])                               from ToValue(Sym(23))
              // Shape: V24=[u84] and S24=[]
              val x24: Boolean = x23
              // RuntimeCheck : POST:   V24 = [u84]                                            from Bubble up value for Sym(24) <- FromValue(Sym(24))
              // RuntimeCheck : POST:   S24 = []                                               from Bubble up shape for Sym(24) <- FromValue(Sym(24))
              // Shape: V30=[u83] and S30=[]
              val x30: Boolean = x24
              // RuntimeCheck : POST:   V30 = [u83]                                            from Bubble up value for Sym(30) <- ToValue(Sym(30))
              // RuntimeCheck : POST:   S30 = []                                               from Bubble up shape for Sym(30) <- ToValue(Sym(30))
              // RuntimeCheck : PRE:    length(S30) = length([])                               from ToValue(Sym(30))
              // Shape: V31=[u82] and S31=[]
              val x31: Boolean = x30
              // Shape: V20=[3] and S20=[]
              val x20: Int = internalReshape(Nil, Array(3), "knownAtCompileTime")
              // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- Dim(Sym(108))
              // Shape: V116=[u7] and S116=[]
              val x116: Int = dim(x108)
              // RuntimeCheck : POST:   V116 = [u7]                                            from Bubble up value for Sym(116) <- FromValue(Sym(116))
              // RuntimeCheck : POST:   S116 = []                                              from Bubble up shape for Sym(116) <- FromValue(Sym(116))
              // Shape: V117=[u12] and S117=[]
              val x117: Int = x116
              // RuntimeCheck : POST:   V20 = [3]                                              from Bubble up value for Sym(20) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : POST:   S20 = []                                               from Bubble up shape for Sym(20) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : POST:   V117 = [u12]                                           from Bubble up value for Sym(117) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : POST:   S117 = []                                              from Bubble up shape for Sym(117) <- Values(Sym(20), Sym(117))
              // RuntimeCheck : PRE:    S117 = []                                              from Values(Sym(20), Sym(117))
              // RuntimeCheck : PRE:    S20 = []                                               from Values(Sym(20), Sym(117))
              // Shape: S118=[u12]
              val x118: MDArray[Int] = {
                val result = new Array[Int](x117)
                for(i <- List.range(0, result.length))
                result(i) = x20
                internalReshape(x117::Nil, result, "values")
              }
              // RuntimeCheck : POST:   S118 = [u12]                                           from Bubble up shape for Sym(118) <- GenArrayWith(Sym(118) - Sym(128))
              // RuntimeCheck : POST:   S128 = U71                                             from Bubble up shape for Sym(128) <- GenArrayWith(Sym(118) - Sym(128))
              // RuntimeCheck : PRE:    S118 = [u328]                                          from GenArrayWith(Sym(118) - Sym(128))
              // RuntimeCheck : PRE:    S118 = S122                                            from GenArrayWith(Sym(118) - Sym(128))
              // RuntimeCheck : PRE:    V118(:length(V122)) < V122                             from GenArrayWith(Sym(118) - Sym(128))
              // RuntimeCheck : PRE:    V118(length(V122):) = S128                             from GenArrayWith(Sym(118) - Sym(128))
              // Shape: S129=U66
              
              val x129: MDArray[Int] = {
                val opName: String = "genarray"
                var result: Array[Int] = null
                var rshape: Array[Int] = null
                // RuntimeCheck : POST:   S118 = [u12]                                           from Bubble up shape for Sym(118) <- Shape(Sym(118))
                // Shape: V120=[u12] and S120=[1]
                val x120: MDArray[Int] = shape(x118)
                // RuntimeCheck : POST:   V120 = [u12]                                           from Bubble up value for Sym(120) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : POST:   S120 = [1]                                             from Bubble up shape for Sym(120) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : POST:   V7 = [0]                                               from Bubble up value for Sym(7) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : POST:   S7 = [1]                                               from Bubble up shape for Sym(7) <- Sel(Sym(7), Sym(120))
                // RuntimeCheck : PRE:    length(S7) = length([u448])                            from Sel(Sym(7), Sym(120))
                // RuntimeCheck : PRE:    S120(:length(V7)) < V7                                 from Sel(Sym(7), Sym(120))
                // Shape: V121=[u12] and S121=[]
                
                // Shape: V121=[u12] and S121=[]
                val x121: Int = x120.content()(flatten(shape(x120), x7, "sel"))
                // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : POST:   V121 = [u12]                                           from Bubble up value for Sym(121) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : POST:   S121 = []                                              from Bubble up shape for Sym(121) <- Values(Sym(10), Sym(121))
                // RuntimeCheck : PRE:    S121 = []                                              from Values(Sym(10), Sym(121))
                // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(121))
                // Shape: S122=[u12]
                val x122: MDArray[Int] = {
                  val result = new Array[Int](x121)
                  for(i <- List.range(0, result.length))
                  result(i) = x10
                  internalReshape(x121::Nil, result, "values")
                }
                // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : POST:   V121 = [u12]                                           from Bubble up value for Sym(121) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : POST:   S121 = []                                              from Bubble up shape for Sym(121) <- Values(Sym(12), Sym(121))
                // RuntimeCheck : PRE:    S121 = []                                              from Values(Sym(12), Sym(121))
                // RuntimeCheck : PRE:    S12 = []                                               from Values(Sym(12), Sym(121))
                // Shape: S124=[u12]
                val x124: MDArray[Int] = {
                  val result = new Array[Int](x121)
                  for(i <- List.range(0, result.length))
                  result(i) = x12
                  internalReshape(x121::Nil, result, "values")
                }
                // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- InfixOp(-: Sym(118) and Sym(12))
                // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- InfixOp(-: Sym(118) and Sym(12))
                // RuntimeCheck : POST:   S118 = [u12]                                           from Bubble up shape for Sym(118) <- InfixOp(-: Sym(118) and Sym(12))
                // RuntimeCheck : PRE:    S118 = S12 OR S12 = []                                 from InfixOp(-: Sym(118) and Sym(12))
                // Shape: S123=[u12]
                val x123: MDArray[Int] = {
                  val result = new Array[Int](shape(x118).content().foldLeft(1)((a,b) => a*b))
                  for(i <- List.range(0, result.length))
                  result(i) = x118.content()(i) -  x12
                  internalReshape(shape(x118), result, "infixOpAA")
                }
                // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- InfixOp(-: Sym(115) and Sym(12))
                // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- InfixOp(-: Sym(115) and Sym(12))
                // RuntimeCheck : POST:   S115 = [u12]                                           from Bubble up shape for Sym(115) <- InfixOp(-: Sym(115) and Sym(12))
                // RuntimeCheck : PRE:    S115 = S12 OR S12 = []                                 from InfixOp(-: Sym(115) and Sym(12))
                // Shape: S119=[u12]
                val x119: MDArray[Int] = {
                  val result = new Array[Int](shape(x115).content().foldLeft(1)((a,b) => a*b))
                  for(i <- List.range(0, result.length))
                  result(i) = x115.content()(i) -  x12
                  internalReshape(shape(x115), result, "infixOpAA")
                }
                // RuntimeCheck : POST:   S127 = U71                                             from Bubble up shape for Sym(127) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   S125 = [u12]                                           from Bubble up shape for Sym(125) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   S122 = [u12]                                           from Bubble up shape for Sym(122) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   S124 = [u12]                                           from Bubble up shape for Sym(124) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   V31 = [u82]                                            from Bubble up value for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   S31 = []                                               from Bubble up shape for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   S123 = [u12]                                           from Bubble up shape for Sym(123) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   V31 = [u82]                                            from Bubble up value for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   S31 = []                                               from Bubble up shape for Sym(31) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : POST:   S122 = [u12]                                           from Bubble up shape for Sym(122) <- With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : PRE:    length(S122) = length([u329])                          from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : PRE:    S31 = []                                               from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : PRE:    S31 = []                                               from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : PRE:    S123 = S122                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : PRE:    S124 = S122                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : PRE:    S122 = S122                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // RuntimeCheck : PRE:    V122 < V123                                            from With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                // Shape: S128=U71
                // with: With(lb=Sym(122) lbStrict=Sym(31) ubStict=Sym(31) ub=Sym(123) step=Sym(124) width=Sym(122)  Sym(125) => Sym(127))
                for (iv <- iterateWithStep(_lb=x122, lbStrict=x31, ubStrict=x31, _ub=x123, step=x124, width=x122, opName=opName)) {
                  val x125: MDArray[Int] = iv
                  val feval: MDArray[Int] = {
                    // RuntimeCheck : POST:   S119 = [u12]                                           from Bubble up shape for Sym(119) <- InfixOp(+: Sym(125) and Sym(119))
                    // RuntimeCheck : POST:   S125 = [u12]                                           from Bubble up shape for Sym(125) <- InfixOp(+: Sym(125) and Sym(119))
                    // RuntimeCheck : PRE:    S125 = S119 OR S119 = []                               from InfixOp(+: Sym(125) and Sym(119))
                    // Shape: S126=[u12]
                    val x126: MDArray[Int] = {
                      val result = new Array[Int](shape(x125).content().foldLeft(1)((a,b) => a*b))
                      for(i <- List.range(0, result.length))
                      result(i) = x125.content()(i) +  x119.content()(i)
                      internalReshape(shape(x125), result, "infixOpAA")
                    }
                    // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- Sel(Sym(126), Sym(108))
                    // RuntimeCheck : POST:   S126 = [u12]                                           from Bubble up shape for Sym(126) <- Sel(Sym(126), Sym(108))
                    // RuntimeCheck : PRE:    length(S126) = length([u342])                          from Sel(Sym(126), Sym(108))
                    // RuntimeCheck : PRE:    S108(:length(V126)) < V126                             from Sel(Sym(126), Sym(108))
                    // Shape: S127=U71
                    val x127: MDArray[Int] = sel(x126, x108)
                    x127
                  }
                  // the action of this loop:
                  if (result == null) {
                    // create the array and shape
                    result = new Array[Int](x118.content().foldLeft(1)((a,b) => a*b) * feval.content().length)
                    rshape = shape(feval).content()
                  } else {
                    // check shape -- this WILL be redundant due to runtime checks
                    if (shape(feval).content().toList != rshape.toList) throw new Exception(opName + ": Incompatible shapes:" + rshape.toList.toString + " vs " + shape(feval).content().toList.toString)
                  }
                  // copy new content
                  val mainIndex: Int = flatten(x118 ::: rshape.toList, iv ::: zeros(rshape.length), opName)
                  for (innerIndex <- List.range(0, rshape.length)) {
                    result(mainIndex + innerIndex) = feval(innerIndex)
                  }
                }
                internalReshape(x118 ::: rshape.toList, result, opName)
              }
              
              // RuntimeCheck : POST:   S129 = U66                                             from Bubble up shape for Sym(129) <- Dim(Sym(129))
              // Shape: V130=[u32] and S130=[]
              val x130: Int = dim(x129)
              // RuntimeCheck : POST:   V130 = [u32]                                           from Bubble up value for Sym(130) <- FromValue(Sym(130))
              // RuntimeCheck : POST:   S130 = []                                              from Bubble up shape for Sym(130) <- FromValue(Sym(130))
              // Shape: V131=[u68] and S131=[]
              val x131: Int = x130
              // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(131))
              // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(131))
              // RuntimeCheck : POST:   V131 = [u68]                                           from Bubble up value for Sym(131) <- Values(Sym(10), Sym(131))
              // RuntimeCheck : POST:   S131 = []                                              from Bubble up shape for Sym(131) <- Values(Sym(10), Sym(131))
              // RuntimeCheck : PRE:    S131 = []                                              from Values(Sym(10), Sym(131))
              // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(131))
              // Shape: S132=[u68]
              val x132: MDArray[Int] = {
                val result = new Array[Int](x131)
                for(i <- List.range(0, result.length))
                result(i) = x10
                internalReshape(x131::Nil, result, "values")
              }
              // RuntimeCheck : POST:   S129 = U66                                             from Bubble up shape for Sym(129) <- Shape(Sym(129))
              // Shape: V133=U66 and S133=[u68]
              val x133: MDArray[Int] = shape(x129)
              // RuntimeCheck : POST:   S132 = [u68]                                           from Bubble up shape for Sym(132) <- Shape(Sym(132))
              // Shape: V134=[u68] and S134=[1]
              val x134: MDArray[Int] = shape(x132)
              // RuntimeCheck : POST:   V134 = [u68]                                           from Bubble up value for Sym(134) <- Sel(Sym(7), Sym(134))
              // RuntimeCheck : POST:   S134 = [1]                                             from Bubble up shape for Sym(134) <- Sel(Sym(7), Sym(134))
              // RuntimeCheck : POST:   V7 = [0]                                               from Bubble up value for Sym(7) <- Sel(Sym(7), Sym(134))
              // RuntimeCheck : POST:   S7 = [1]                                               from Bubble up shape for Sym(7) <- Sel(Sym(7), Sym(134))
              // RuntimeCheck : PRE:    length(S7) = length([u308])                            from Sel(Sym(7), Sym(134))
              // RuntimeCheck : PRE:    S134(:length(V7)) < V7                                 from Sel(Sym(7), Sym(134))
              // Shape: V135=[u68] and S135=[]
              
              // Shape: V135=[u68] and S135=[]
              val x135: Int = x134.content()(flatten(shape(x134), x7, "sel"))
              // RuntimeCheck : POST:   V12 = [1]                                              from Bubble up value for Sym(12) <- Values(Sym(12), Sym(135))
              // RuntimeCheck : POST:   S12 = []                                               from Bubble up shape for Sym(12) <- Values(Sym(12), Sym(135))
              // RuntimeCheck : POST:   V135 = [u68]                                           from Bubble up value for Sym(135) <- Values(Sym(12), Sym(135))
              // RuntimeCheck : POST:   S135 = []                                              from Bubble up shape for Sym(135) <- Values(Sym(12), Sym(135))
              // RuntimeCheck : PRE:    S135 = []                                              from Values(Sym(12), Sym(135))
              // RuntimeCheck : PRE:    S12 = []                                               from Values(Sym(12), Sym(135))
              // Shape: S136=[u68]
              val x136: MDArray[Int] = {
                val result = new Array[Int](x135)
                for(i <- List.range(0, result.length))
                result(i) = x12
                internalReshape(x135::Nil, result, "values")
              }
              // RuntimeCheck : POST:   V10 = [0]                                              from Bubble up value for Sym(10) <- Values(Sym(10), Sym(135))
              // RuntimeCheck : POST:   S10 = []                                               from Bubble up shape for Sym(10) <- Values(Sym(10), Sym(135))
              // RuntimeCheck : POST:   V135 = [u68]                                           from Bubble up value for Sym(135) <- Values(Sym(10), Sym(135))
              // RuntimeCheck : POST:   S135 = []                                              from Bubble up shape for Sym(135) <- Values(Sym(10), Sym(135))
              // RuntimeCheck : PRE:    S135 = []                                              from Values(Sym(10), Sym(135))
              // RuntimeCheck : PRE:    S10 = []                                               from Values(Sym(10), Sym(135))
              // Shape: S137=[u68]
              val x137: MDArray[Int] = {
                val result = new Array[Int](x135)
                for(i <- List.range(0, result.length))
                result(i) = x10
                internalReshape(x135::Nil, result, "values")
              }
              // RuntimeCheck : POST:   V142 = [u137]                                          from Bubble up value for Sym(142) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S142 = []                                              from Bubble up shape for Sym(142) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S141 = [u68]                                           from Bubble up shape for Sym(141) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S137 = [u68]                                           from Bubble up shape for Sym(137) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S136 = [u68]                                           from Bubble up shape for Sym(136) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   V16 = [u105]                                           from Bubble up value for Sym(16) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S16 = []                                               from Bubble up shape for Sym(16) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   V133 = U66                                             from Bubble up value for Sym(133) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S133 = [u68]                                           from Bubble up shape for Sym(133) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   V31 = [u82]                                            from Bubble up value for Sym(31) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S31 = []                                               from Bubble up shape for Sym(31) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : POST:   S132 = [u68]                                           from Bubble up shape for Sym(132) <- With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : PRE:    length(S132) = length([u252])                          from With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : PRE:    S31 = []                                               from With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : PRE:    S16 = []                                               from With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : PRE:    S133 = S132                                            from With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : PRE:    S136 = S132                                            from With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : PRE:    S137 = S132                                            from With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // RuntimeCheck : PRE:    V132 < V133                                            from With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              // Shape: V143=[u136] and S143=[]
              // with: With(lb=Sym(132) lbStrict=Sym(31) ubStict=Sym(16) ub=Sym(133) step=Sym(136) width=Sym(137)  Sym(141) => Sym(142))
              for (iv <- iterateWithStep(_lb=x132, lbStrict=x31, ubStrict=x16, _ub=x133, step=x136, width=x137, opName=opName)) {
                val x141: MDArray[Int] = iv
                val feval: MDArray[Int] = {
                  // RuntimeCheck : POST:   S129 = U66                                             from Bubble up shape for Sym(129) <- Sel(Sym(141), Sym(129))
                  // RuntimeCheck : POST:   S141 = [u68]                                           from Bubble up shape for Sym(141) <- Sel(Sym(141), Sym(129))
                  // RuntimeCheck : PRE:    length(S141) = length([u327])                          from Sel(Sym(141), Sym(129))
                  // RuntimeCheck : PRE:    S129(:length(V141)) < V141                             from Sel(Sym(141), Sym(129))
                  // Shape: V142=[u137] and S142=[]
                  
                  // Shape: V142=[u137] and S142=[]
                  val x142: Int = x129.content()(flatten(shape(x129), x141, "sel"))
                  x142
                }
                // the action of this loop:
                result = foldFunction(result, feval)
              }
              result
            }
            
            // RuntimeCheck : POST:   V144 = [u103]                                          from Bubble up value for Sym(144) <- ToValue(Sym(144))
            // RuntimeCheck : POST:   S144 = []                                              from Bubble up shape for Sym(144) <- ToValue(Sym(144))
            // RuntimeCheck : PRE:    length(S144) = length([])                              from ToValue(Sym(144))
            // Shape: V145=[u56] and S145=[]
            val x145: Int = x144
            // RuntimeCheck : POST:   V145 = [u56]                                           from Bubble up value for Sym(145) <- FromValue(Sym(145))
            // RuntimeCheck : POST:   S145 = []                                              from Bubble up shape for Sym(145) <- FromValue(Sym(145))
            // Shape: V146=[u55] and S146=[]
            val x146: Int = x145
            // RuntimeCheck : POST:   V147 = [u139]                                          from Bubble up value for Sym(147) <- InfixOp(-: Sym(146) and Sym(147))
            // RuntimeCheck : POST:   S147 = []                                              from Bubble up shape for Sym(147) <- InfixOp(-: Sym(146) and Sym(147))
            // RuntimeCheck : POST:   V146 = [u55]                                           from Bubble up value for Sym(146) <- InfixOp(-: Sym(146) and Sym(147))
            // RuntimeCheck : POST:   S146 = []                                              from Bubble up shape for Sym(146) <- InfixOp(-: Sym(146) and Sym(147))
            // RuntimeCheck : PRE:    S146 = S147 OR S147 = []                               from InfixOp(-: Sym(146) and Sym(147))
            // Shape: V150=[u54] and S150=[]
            val x150: Int = {
              val result = new Array[Int](shape(x146).content().foldLeft(1)((a,b) => a*b))
              for(i <- List.range(0, result.length))
              result(i) = x146.content()(i) -  x147
              internalReshape(shape(x146), result, "infixOpAA")
            }
            // RuntimeCheck : POST:   V58 = [2]                                              from Bubble up value for Sym(58) <- InfixOp(<: Sym(150) and Sym(58))
            // RuntimeCheck : POST:   S58 = []                                               from Bubble up shape for Sym(58) <- InfixOp(<: Sym(150) and Sym(58))
            // RuntimeCheck : POST:   V150 = [u54]                                           from Bubble up value for Sym(150) <- InfixOp(<: Sym(150) and Sym(58))
            // RuntimeCheck : POST:   S150 = []                                              from Bubble up shape for Sym(150) <- InfixOp(<: Sym(150) and Sym(58))
            // RuntimeCheck : PRE:    S150 = S58 OR S58 = []                                 from InfixOp(<: Sym(150) and Sym(58))
            // Shape: V151=[u53] and S151=[]
            val x151: Boolean = {
              val result = new Array[Boolean](shape(x150).content().foldLeft(1)((a,b) => a*b))
              for(i <- List.range(0, result.length))
              result(i) = x150.content()(i) <  x58
              internalReshape(shape(x150), result, "infixOpAA")
            }
            // RuntimeCheck : POST:   V151 = [u53]                                           from Bubble up value for Sym(151) <- ToValue(Sym(151))
            // RuntimeCheck : POST:   S151 = []                                              from Bubble up shape for Sym(151) <- ToValue(Sym(151))
            // RuntimeCheck : PRE:    length(S151) = length([])                              from ToValue(Sym(151))
            // Shape: V152=[u48] and S152=[]
            val x152: Boolean = x151
            val x157 = if (x152) {
              x12
            } else {
              // Shape: V62=[4] and S62=[]
              val x62: Int = internalReshape(Nil, Array(4), "knownAtCompileTime")
              // RuntimeCheck : POST:   V147 = [u139]                                          from Bubble up value for Sym(147) <- InfixOp(-: Sym(146) and Sym(147))
              // RuntimeCheck : POST:   S147 = []                                              from Bubble up shape for Sym(147) <- InfixOp(-: Sym(146) and Sym(147))
              // RuntimeCheck : POST:   V146 = [u55]                                           from Bubble up value for Sym(146) <- InfixOp(-: Sym(146) and Sym(147))
              // RuntimeCheck : POST:   S146 = []                                              from Bubble up shape for Sym(146) <- InfixOp(-: Sym(146) and Sym(147))
              // RuntimeCheck : PRE:    S146 = S147 OR S147 = []                               from InfixOp(-: Sym(146) and Sym(147))
              // Shape: V153=[u52] and S153=[]
              val x153: Int = {
                val result = new Array[Int](shape(x146).content().foldLeft(1)((a,b) => a*b))
                for(i <- List.range(0, result.length))
                result(i) = x146.content()(i) -  x147
                internalReshape(shape(x146), result, "infixOpAA")
              }
              // RuntimeCheck : POST:   V62 = [4]                                              from Bubble up value for Sym(62) <- InfixOp(<: Sym(153) and Sym(62))
              // RuntimeCheck : POST:   S62 = []                                               from Bubble up shape for Sym(62) <- InfixOp(<: Sym(153) and Sym(62))
              // RuntimeCheck : POST:   V153 = [u52]                                           from Bubble up value for Sym(153) <- InfixOp(<: Sym(153) and Sym(62))
              // RuntimeCheck : POST:   S153 = []                                              from Bubble up shape for Sym(153) <- InfixOp(<: Sym(153) and Sym(62))
              // RuntimeCheck : PRE:    S153 = S62 OR S62 = []                                 from InfixOp(<: Sym(153) and Sym(62))
              // Shape: V154=[u51] and S154=[]
              val x154: Boolean = {
                val result = new Array[Boolean](shape(x153).content().foldLeft(1)((a,b) => a*b))
                for(i <- List.range(0, result.length))
                result(i) = x153.content()(i) <  x62
                internalReshape(shape(x153), result, "infixOpAA")
              }
              // RuntimeCheck : POST:   V154 = [u51]                                           from Bubble up value for Sym(154) <- ToValue(Sym(154))
              // RuntimeCheck : POST:   S154 = []                                              from Bubble up shape for Sym(154) <- ToValue(Sym(154))
              // RuntimeCheck : PRE:    length(S154) = length([])                              from ToValue(Sym(154))
              // Shape: V155=[u44] and S155=[]
              val x155: Boolean = x154
              val x156 = if (x155) {
                x10
              } else {
                x12
              }
              x156
            }
            x157
          } else {
            x10
          }
          x158
        }
        // the action of this loop:
        if (result == null) {
          // create the array and shape
          result = new Array[Int](x109.content().foldLeft(1)((a,b) => a*b) * feval.content().length)
          rshape = shape(feval).content()
        } else {
          // check shape -- this WILL be redundant due to runtime checks
          if (shape(feval).content().toList != rshape.toList) throw new Exception(opName + ": Incompatible shapes:" + rshape.toList.toString + " vs " + shape(feval).content().toList.toString)
        }
        // copy new content
        val mainIndex: Int = flatten(x109 ::: rshape.toList, iv ::: zeros(rshape.length), opName)
        for (innerIndex <- List.range(0, rshape.length)) {
          result(mainIndex + innerIndex) = feval(innerIndex)
        }
      }
      internalReshape(x109 ::: rshape.toList, result, opName)
    }
    
    // RuntimeCheck : POST:   S160 = U135                                            from Bubble up shape for Sym(160) <- InfixOp(-: Sym(108) and Sym(160))
    // RuntimeCheck : POST:   S108 = U135                                            from Bubble up shape for Sym(108) <- InfixOp(-: Sym(108) and Sym(160))
    // RuntimeCheck : PRE:    S108 = S160 OR S160 = []                               from InfixOp(-: Sym(108) and Sym(160))
    // Shape: S196=U135
    val x196: MDArray[Int] = {
      // WARNING: Operation not specialized on {arrays|scalars}!
      if (shape(shape(x160)).content()(0) == 0) {
        val result = new Array[Int](shape(x108).content().foldLeft(1)((a,b) => a*b))
        for(i <- List.range(0, result.length))
        result(i) = x108.content()(i) -  x160
        internalReshape(shape(x108), result, "infixOpAA")
      } else {
        val result = new Array[Int](shape(x108).content().foldLeft(1)((a,b) => a*b))
        for(i <- List.range(0, result.length))
        result(i) = x108.content()(i) -  x160.content()(i)
        internalReshape(shape(x108), result, "infixOpAA")
      }
    }
    // RuntimeCheck : POST:   S195 = U135                                            from Bubble up shape for Sym(195) <- InfixOp(+: Sym(196) and Sym(195))
    // RuntimeCheck : POST:   S196 = U135                                            from Bubble up shape for Sym(196) <- InfixOp(+: Sym(196) and Sym(195))
    // RuntimeCheck : PRE:    S196 = S195 OR S195 = []                               from InfixOp(+: Sym(196) and Sym(195))
    // Shape: S197=U135
    val x197: MDArray[Int] = {
      // WARNING: Operation not specialized on {arrays|scalars}!
      if (shape(shape(x195)).content()(0) == 0) {
        val result = new Array[Int](shape(x196).content().foldLeft(1)((a,b) => a*b))
        for(i <- List.range(0, result.length))
        result(i) = x196.content()(i) +  x195
        internalReshape(shape(x196), result, "infixOpAA")
      } else {
        val result = new Array[Int](shape(x196).content().foldLeft(1)((a,b) => a*b))
        for(i <- List.range(0, result.length))
        result(i) = x196.content()(i) +  x195.content()(i)
        internalReshape(shape(x196), result, "infixOpAA")
      }
    }
    x197
  }
}
/*****************************************
  End of Generated Code                  
*******************************************/
