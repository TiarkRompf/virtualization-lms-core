Map(Sym(14) -> Sym(19), Sym(10) -> Sym(18), Sym(17) -> Sym(32), Sym(24) -> Sym(12), Sym(6) -> Sym(8), Sym(20) -> Sym(35), Sym(7) -> Sym(15), Sym(27) -> Sym(20), Sym(13) -> Sym(9), Sym(11) -> Sym(5), Sym(12) -> Sym(6), Sym(5) -> Sym(7), Sym(19) -> Sym(34), Sym(23) -> Sym(11), Sym(15) -> Sym(30), Sym(8) -> Sym(16), Sym(9) -> Sym(17), Sym(21) -> Sym(36), Sym(28) -> Sym(37), Sym(16) -> Sym(31), Sym(18) -> Sym(33), Sym(26) -> Sym(14), Sym(29) -> Sym(38), Sym(25) -> Sym(13), Sym(22) -> Sym(10))
r0:
TP(Sym(6),ArrayApply(Sym(0),Sym(5)))
TP(Sym(7),NumericPlus(Sym(5),Const(1)))
TP(Sym(8),ArrayApply(Sym(0),Sym(7)))
TP(Sym(9),NumericTimes(Sym(6),Sym(8)))
TP(Sym(10),NumericMinus(Sym(6),Sym(9)))
TP(Sym(11),NumericMinus(Sym(5),Const(1)))
TP(Sym(12),ArrayApply(Sym(0),Sym(11)))
TP(Sym(13),NumericTimes(Sym(12),Sym(6)))
TP(Sym(14),NumericPlus(Sym(10),Sym(13)))
TP(Sym(15),NumericPlus(Sym(5),Const(2)))
TP(Sym(16),ArrayApply(Sym(0),Sym(15)))
TP(Sym(17),NumericTimes(Sym(8),Sym(16)))
TP(Sym(18),NumericMinus(Sym(8),Sym(17)))
TP(Sym(19),NumericPlus(Sym(18),Sym(9)))
TP(Sym(20),NumericTimes(Sym(14),Sym(19)))
TP(Sym(21),NumericMinus(Sym(14),Sym(20)))
TP(Sym(22),NumericMinus(Sym(12),Sym(13)))
TP(Sym(23),NumericMinus(Sym(5),Const(2)))
TP(Sym(24),ArrayApply(Sym(0),Sym(23)))
TP(Sym(25),NumericTimes(Sym(24),Sym(12)))
TP(Sym(26),NumericPlus(Sym(22),Sym(25)))
TP(Sym(27),NumericTimes(Sym(26),Sym(14)))
TP(Sym(28),NumericPlus(Sym(21),Sym(27)))
TP(Sym(29),Reflect(ArrayUpdate(Sym(2),Sym(5),Sym(28)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(2))))
r1:
TP(Sym(30),NumericPlus(Sym(5),Const(3)))
TP(Sym(31),ArrayApply(Sym(0),Sym(30)))
TP(Sym(32),NumericTimes(Sym(16),Sym(31)))
TP(Sym(33),NumericMinus(Sym(16),Sym(32)))
TP(Sym(34),NumericPlus(Sym(33),Sym(17)))
TP(Sym(35),NumericTimes(Sym(19),Sym(34)))
TP(Sym(36),NumericMinus(Sym(19),Sym(35)))
TP(Sym(37),NumericPlus(Sym(36),Sym(20)))
TP(Sym(38),Reflect(ArrayUpdate(Sym(2),Sym(7),Sym(37)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(2))))
r2:
TP(Sym(39),NumericPlus(Sym(5),Const(4)))
TP(Sym(40),ArrayApply(Sym(0),Sym(39)))
TP(Sym(41),NumericTimes(Sym(31),Sym(40)))
TP(Sym(42),NumericMinus(Sym(31),Sym(41)))
TP(Sym(43),NumericPlus(Sym(42),Sym(32)))
TP(Sym(44),NumericTimes(Sym(34),Sym(43)))
TP(Sym(45),NumericMinus(Sym(34),Sym(44)))
TP(Sym(46),NumericPlus(Sym(45),Sym(35)))
TP(Sym(47),Reflect(ArrayUpdate(Sym(2),Sym(15),Sym(46)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(2))))
Map(Sym(14) -> Sym(19), Sym(10) -> Sym(18), Sym(17) -> Sym(32), Sym(24) -> Sym(12), Sym(6) -> Sym(8), Sym(20) -> Sym(35), Sym(7) -> Sym(15), Sym(27) -> Sym(20), Sym(13) -> Sym(9), Sym(11) -> Sym(5), Sym(12) -> Sym(6), Sym(5) -> Sym(7), Sym(19) -> Sym(34), Sym(23) -> Sym(11), Sym(15) -> Sym(30), Sym(8) -> Sym(16), Sym(9) -> Sym(17), Sym(21) -> Sym(36), Sym(28) -> Sym(37), Sym(16) -> Sym(31), Sym(18) -> Sym(33), Sym(26) -> Sym(14), Sym(29) -> Sym(38), Sym(25) -> Sym(13), Sym(22) -> Sym(10))
overlap1:
(Sym(16),Sym(31))
(Sym(17),Sym(32))
(Sym(19),Sym(34))
(Sym(20),Sym(35))
(Sym(7),Sym(15))
overlap2:
(Sym(15),Sym(39))
NOTE: overlap beyond a single loop iteration will be ignored (not yet implemented)
var inits: List(Sym(16), Sym(17), Sym(19), Sym(20), Sym(7), Sym(15)) -> List(Variable(Sym(69)), Variable(Sym(70)), Variable(Sym(71)), Variable(Sym(72)), Variable(Sym(73)), Variable(Sym(74)))
will become var reads: List(Sym(16), Sym(17), Sym(19), Sym(20), Sym(7), Sym(15))
will become var writes: List(Sym(31), Sym(32), Sym(34), Sym(35), Sym(15), Sym(30))
warning: possible missing mtype call - toAtom with Def of type Any ReadVar(Variable(Sym(69)))
warning: possible missing mtype call - toAtom with Def of type Any ReadVar(Variable(Sym(70)))
warning: possible missing mtype call - toAtom with Def of type Any ReadVar(Variable(Sym(71)))
warning: possible missing mtype call - toAtom with Def of type Any ReadVar(Variable(Sym(72)))
warning: possible missing mtype call - toAtom with Def of type Any ReadVar(Variable(Sym(73)))
warning: possible missing mtype call - toAtom with Def of type Any ReadVar(Variable(Sym(74)))
var reads: List((Sym(16),Sym(77)), (Sym(17),Sym(78)), (Sym(19),Sym(79)), (Sym(20),Sym(80)), (Sym(7),Sym(81)), (Sym(15),Sym(82)))
var writes: List((Sym(31),Const(())), (Sym(32),Const(())), (Sym(34),Const(())), (Sym(35),Const(())), (Sym(15),Const(())), (Sym(30),Const(())))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class staged1 extends ((Array[Double])=>(Array[Double])) {
def apply(x0:Array[Double]): Array[Double] = {
val x1 = x0.length
val x2 = new Array[Double](x1)
val x3 = x1 - 2
val x48 = x3 > 2
if (x48) {
val x49 = x0(2)
val x50 = x0(3)
val x51 = x49 * x50
val x52 = x49 - x51
val x53 = x0(1)
val x54 = x53 * x49
val x55 = x52 + x54
val x56 = x0(4)
val x57 = x50 * x56
val x58 = x50 - x57
val x59 = x58 + x51
val x60 = x55 * x59
val x61 = x55 - x60
val x62 = x53 - x54
val x63 = x0(0)
val x64 = x63 * x53
val x65 = x62 + x64
val x66 = x65 * x55
val x67 = x61 + x66
x2(2) = x67
var x69 = x56
var x70 = x57
var x71 = x59
var x72 = x60
var x73 = 3
var x74 = 4
var x76 : Int = 3
while (x76 < x3) {
val x77 = x69
val x78 = x70
val x79 = x71
val x80 = x72
val x81 = x73
val x82 = x74
val x84 = x76 + 2
val x85 = x0(x84)
val x86 = x77 * x85
val x87 = x77 - x86
val x88 = x87 + x78
val x89 = x79 * x88
val x90 = x79 - x89
val x91 = x90 + x80
x2(x81) = x91
x69 = x85
x70 = x86
x71 = x88
x72 = x89
x73 = x82
x74 = x84
x76 = x76 + 1
}

} else {
()
}
x2
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

8.0
12.0
16.0
20.0
24.0
28.0
32.0
36.0
40.0
44.0
48.0
52.0
56.0
60.0
64.0
68.0
72.0
76.0
80.0
84.0
