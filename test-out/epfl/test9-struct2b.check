wtableneg: List()
partitions: List(TTP(List(Sym(10), Sym(11), Sym(4), Sym(5)),List(SimpleLoop(Const(100),Sym(7),ArrayElem(Block(Sym(8)))), SimpleLoop(Const(100),Sym(7),ArrayElem(Block(Sym(7)))), SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))), SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))),SimpleFatLoop(Const(100),Sym(7),List(ArrayElem(Block(Sym(8))), ArrayElem(Block(Sym(7))), ArrayElem(Block(Sym(1))), ArrayElem(Block(Sym(2)))))))
try once more ...
wtableneg: List()
partitions: List(TTP(List(Sym(10), Sym(11)),List(SimpleLoop(Const(100),Sym(7),ArrayElem(Block(Sym(8)))), SimpleLoop(Const(100),Sym(7),ArrayElem(Block(Sym(7))))),SimpleFatLoop(Const(100),Sym(7),List(ArrayElem(Block(Sym(8))), ArrayElem(Block(Sym(7)))))))
no changes, we're done
super.focusExactScopeFat with result changed from List(Sym(37)) to List(Sym(48))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
var x10 = new Array[Double](100)
var x11 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = 0.0-x7
x10(x7) = x8
x11(x7) = x7
}
var x13: Array[Double] = x10
var x14: Array[Int] = x11
val x16 = x0 > 7
// TODO: use vars instead of tuples to return multiple values
val (x26,x38,x39) = if (x16) {
val x17 = println("foobar true")
((),x11,x10)
} else {
val x20 = x13
val x21 = x14
val x19 = println("foobar false")
((),x20,x21)
}
x13 = x11
x14 = x10
val x42 = x13
val x43 = x14
val x44 = new { val re = x42; val im = x43 }
val x45 = println(x44)
val x46 = new { val re = x38; val im = x39 }
val x47 = println(x46)
val x36 = x47
x36
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
