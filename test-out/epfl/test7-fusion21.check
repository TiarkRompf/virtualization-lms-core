fusion of List((Sym(2),Sym(7))) prevented by TP(Sym(6),ArrayIndex(Sym(2),Const(0))) which is required by body of List(Sym(7))
fusion of List((Sym(4),Sym(10))) prevented by TP(Sym(9),ArrayIndex(Sym(4),Const(0))) which is required by body of List(Sym(10))
wtableneg: List((Sym(2),Sym(7)), (Sym(4),Sym(10)))
partitions: List(TTP(List(Sym(10)),List(SimpleLoop(Const(100),Sym(8),ArrayElem(Block(Sym(9))))),SimpleFatLoop(Const(100),Sym(8),List(ArrayElem(Block(Sym(9)))))), TTP(List(Sym(4), Sym(7)),List(SimpleLoop(Const(50),Sym(3),ArrayElem(Block(Const(3.0)))), SimpleLoop(Const(50),Sym(5),ArrayElem(Block(Sym(6))))),SimpleFatLoop(Const(50),Sym(3),List(ArrayElem(Block(Const(3.0))), ArrayElem(Block(Sym(6)))))), TTP(List(Sym(2)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Const(9.0))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Const(9.0)))))))
considering TP(Sym(6),ArrayIndex(Sym(2),Const(0)))
considering TP(Sym(9),ArrayIndex(Sym(4),Const(0)))
try once more ...
fusion of List((Sym(2),Sym(4)), (Sym(2),Sym(7))) prevented by TP(Sym(6),ArrayIndex(Sym(2),Const(0))) which is required by body of List(Sym(4), Sym(7))
fusion of List((Sym(2),Sym(10))) prevented by TP(Sym(6),ArrayIndex(Sym(2),Const(0))) which is required by body of List(Sym(10))
fusion of List((Sym(4),Sym(10))) prevented by TP(Sym(9),ArrayIndex(Sym(4),Const(0))) which is required by body of List(Sym(10))
wtableneg: List((Sym(2),Sym(4)), (Sym(2),Sym(7)), (Sym(2),Sym(10)), (Sym(4),Sym(10)))
partitions: List(TTP(List(Sym(10)),List(SimpleLoop(Const(100),Sym(8),ArrayElem(Block(Sym(9))))),SimpleFatLoop(Const(100),Sym(8),List(ArrayElem(Block(Sym(9)))))), TTP(List(Sym(4), Sym(7)),List(SimpleLoop(Const(50),Sym(3),ArrayElem(Block(Const(3.0)))), SimpleLoop(Const(50),Sym(5),ArrayElem(Block(Sym(6))))),SimpleFatLoop(Const(50),Sym(3),List(ArrayElem(Block(Const(3.0))), ArrayElem(Block(Sym(6)))))), TTP(List(Sym(2)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Const(9.0))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Const(9.0)))))))
no changes, we're done
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Unit)=>(Unit)) {
def apply(x0:Unit): Unit = {
var x2 = new Array[Double](100)
for (x1 <- 0 until 100) {
x2(x1) = 9.0
}
val x6 = x2.apply(0)
var x4 = new Array[Double](50)
var x7 = new Array[Double](50)
for (x3 <- 0 until 50) {
x4(x3) = 3.0
x7(x3) = x6
}
println(x4)
println(x7)
println(x2)
val x9 = x4.apply(0)
var x10 = new Array[Double](100)
for (x8 <- 0 until 100) {
x10(x8) = x9
}
println(x10)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
