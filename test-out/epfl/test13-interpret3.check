call with arg Map(n -> 256, a -> SomethingElse)
(re) compiling
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX) sym Sym(3)
-- Sym(2)
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX) sym Sym(7)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any HashMapApply(Sym(2),Const(n))
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX) sym Sym(12)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any StaticData(-1)
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(29),Summary(true,true,false,false,false,List(),List(),List(Sym(3)),List()),List(Sym(29)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(35),Summary(true,true,false,false,false,List(),List(),List(Sym(31)),List(Sym(31))),List(Sym(32), Sym(34), Sym(35)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(37),Summary(true,true,false,false,false,List(),List(),List(Sym(3), Sym(31)),List()),List(Sym(37)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(42),Summary(true,true,false,false,false,List(),List(),List(Sym(31)),List(Sym(31))),List(Sym(39), Sym(41), Sym(42)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(44),Summary(true,true,false,false,false,List(),List(),List(Sym(3), Sym(31)),List()),List(Sym(44)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(49),Summary(true,true,false,false,false,List(),List(),List(Sym(31)),List(Sym(31))),List(Sym(46), Sym(48), Sym(49)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(51),Summary(true,true,false,false,false,List(),List(),List(Sym(3), Sym(31)),List()),List(Sym(1), Sym(2), Sym(51)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class staged5(px3:scala.virtualization.lms.epfl.test13.RCell[Object],px5:Object,px7:scala.virtualization.lms.epfl.test13.RCell[Object],px9:Object,px12:scala.virtualization.lms.epfl.test13.RCell[Object],px14:Object,px16:Any,px21:Object,px31:scala.virtualization.lms.epfl.test13.RCell[scala.Function1[scala.collection.mutable.HashMap[java.lang.String, Any], Any]],px33:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]],px40:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]],px47:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]]) extends ((scala.collection.mutable.HashMap[java.lang.String, Any])=>(Any)) {
def apply(x0:scala.collection.mutable.HashMap[java.lang.String, Any]): Any = {
var x1 = x0
val x2 = x1
val x3 = px3 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX)
val x4 = x3.value
val x5 = px5 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN$$anon$23@XXX
val x6 = x4 == x5
val x51 = if (x6) {
val x7 = px7 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX)
val x8 = x7.value
val x9 = px9 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN$$anon$27@XXX
val x10 = x8 == x9
val x44 = if (x10) {
val x12 = px12 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX)
val x13 = x12.value
val x14 = px14 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN$$anon$29@XXX
val x15 = x13 == x14
val x37 = if (x15) {
val x11 = x2("n")
val x17 = x11.isInstanceOf[Int]
val x16 = px16 // static data: -1
val x18 = x16.isInstanceOf[Int]
val x19 = if (x17 == true) {
x18
} else false
val x29 = if (x19) {
println("spec-add-int: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX")
val x21 = px21 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN$$anon$24@XXX
x3.set(x21)
val x23 = x11.asInstanceOf[Int]
val x24 = x16.asInstanceOf[Int]
val x25 = x23 + x24
x25
} else {
println("GENERIC")

}
x29
} else {
val x31 = px31 // static data: RCell(code)
x31.set(null)
val x33 = px33 // static data: <function1>
val x34 = x33.apply(List(x13, x2))// compile dynamic: fv = List(Sym(13), Sym(2))
val x35 = x34.apply(())
x35
}
x37
} else {
val x31 = px31 // static data: RCell(code)
x31.set(null)
val x40 = px40 // static data: <function1>
val x41 = x40.apply(List(x8, x2))// compile dynamic: fv = List(Sym(8), Sym(2))
val x42 = x41.apply(())
x42
}
x44
} else {
val x31 = px31 // static data: RCell(code)
x31.set(null)
val x47 = px47 // static data: <function1>
val x48 = x47.apply(List(x4, x2))// compile dynamic: fv = List(Sym(4), Sym(2))
val x49 = x48.apply(())
x49
}
x51
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

spec-add-int: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX
255
call with arg Map(n -> 256, a -> SomethingElse)
-- Sym(2)
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX) sym Sym(6)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any HashMapApply(Sym(2),Const(n))
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX) sym Sym(12)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any StaticData(-1)
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(23),Summary(true,true,false,false,false,List(),List(),List(Sym(19)),List(Sym(19))),List(Sym(20), Sym(22), Sym(23)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(25),Summary(true,false,false,false,false,List(),List(),List(Sym(19)),List()),List(Sym(25)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(30),Summary(true,true,false,false,false,List(),List(),List(Sym(19)),List(Sym(19))),List(Sym(27), Sym(29), Sym(30)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(32),Summary(true,false,false,false,false,List(),List(),List(Sym(19)),List()),List(Sym(32)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class staged6(px6:scala.virtualization.lms.epfl.test13.RCell[Object],px8:Object,px12:scala.virtualization.lms.epfl.test13.RCell[Object],px14:Object,px2:scala.collection.mutable.HashMap[java.lang.String, Any],px16:Any,px19:scala.virtualization.lms.epfl.test13.RCell[scala.Function1[scala.collection.mutable.HashMap[java.lang.String, Any], Any]],px21:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]],px28:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]]) extends ((Unit)=>(Any)) {
def apply(x5:Unit): Any = {
val x6 = px6 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX)
val x7 = x6.value
val x8 = px8 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN$$anon$27@XXX
val x9 = x7 == x8
val x32 = if (x9) {
val x12 = px12 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX)
val x13 = x12.value
val x14 = px14 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN$$anon$29@XXX
val x15 = x13 == x14
val x25 = if (x15) {
val x2 = px2 // static data: Map(n -> 256, a -> SomethingElse)
val x10 = x2("n")
val x11 = x10.asInstanceOf[Int]
val x16 = px16 // static data: -1
val x17 = x16.asInstanceOf[Int]
val x18 = x11 + x17
x18
} else {
val x19 = px19 // static data: RCell(code)
x19.set(null)
val x2 = px2 // static data: Map(n -> 256, a -> SomethingElse)
val x21 = px21 // static data: <function1>
val x22 = x21.apply(List(x13, x2))// compile dynamic: fv = List(Sym(13), Sym(2))
val x23 = x22.apply(())
x23
}
x25
} else {
val x19 = px19 // static data: RCell(code)
x19.set(null)
val x2 = px2 // static data: Map(n -> 256, a -> SomethingElse)
val x28 = px28 // static data: <function1>
val x29 = x28.apply(List(x7, x2))// compile dynamic: fv = List(Sym(7), Sym(2))
val x30 = x29.apply(())
x30
}
x32
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

255
