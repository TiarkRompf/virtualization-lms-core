/*****************************************
  Emitting Generated Code                  
*******************************************/
class test1 extends ((Double, Long, Long, Double, Double, org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Long, Double], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Double], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Long], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Long], org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Double])=>(scala.collection.immutable.List[scala.Tuple2[scala.Tuple2[Double, Long], Long]])) {
def apply(x0:Double, x1:Long, x2:Long, x3:Double, x4:Double, x5:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[Long, Double], x6:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Double], x7:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Long], x8:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Long], x9:org.dbtoaster.dbtoasterlib.K3Collection.K3PersistentCollection[scala.Tuple2[Long, Double], Double]): scala.collection.immutable.List[scala.Tuple2[scala.Tuple2[Double, Long], Long]] = {
val x13 = x8 // mutable K3PersistentCollection
var x17 = List()
val x24 = -1L * x4
(x13.slice(x2,(List(0)))).foreach{
x18 => 
val x22 = (x18._1)._2
x17 = (((((x22,((if ((1000.0 < (x22 + x24))) {)1L
} else {
0L
}
 + (if ((1000.0 < (x4 + (-1L * x22)))) {)1L
} else {
0L
}
))),((x18._2) * 1L))) :: (x17))
}
(x17)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
