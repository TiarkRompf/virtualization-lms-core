promoting to effect: Sym(5)=Reflect(ArrayClone(Sym(3)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List())
depends on  Sym(3)
promoting to effect: Sym(9)=Reflect(ArrayIndex(Sym(8),Const(5)),Summary(false,false,false,false,false,List(Sym(8)),List(Sym(8)),List(),List()),List(Sym(8)))
depends on  Sym(8)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x2 = LoopArray(100) { x1 => 
0.0
}
val x3 = x2.clone // mutable
val x7 = LoopArray(10) { x4 => 
val x5 = x3.clone
x5
}
val x8 = x7.clone // mutable
val x9 = x8.apply(5)
val x10 = x9.apply(50)
println(x10)
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
